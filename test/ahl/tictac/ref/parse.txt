100 PRINT"YOU HAVE THE OPPORTUNITY OF TRYING TO BEAT THE COMPUTER"
 TextValue:"YOU HAVE THE OPPORTUNITY OF TRYING TO BEAT THE COMPUTER"
 CarriageControl:NL
130 PRINT"AT TIC-TAC-TOE, ENTER YOUR MOVES AS FOLLOWS:"
 TextValue:"AT TIC-TAC-TOE, ENTER YOUR MOVES AS FOLLOWS:"
 CarriageControl:NL
140 PRINT
 CarriageControl:NL
150 DIM C(11)
 NumericValue:11
 Declaration:C() -> .()
160 DIM D(11)
 NumericValue:11
 Declaration:D() -> .()
170 FOR K=1 TO 11
 control: Variable:K -> .
 start:   ["NumericValue:1"]
 end:     ["NumericValue:11"]
180 READ C(K),D(K)
 Variable:K -> .
 Variable:C(.) -> .
 Variable:K -> .
 Variable:D(.) -> .
190 NEXT K
 Variable:K -> .
200 PRINT
 CarriageControl:NL
210 PRINT
 CarriageControl:NL
220 PRINT"ROWS ARE HORIZONTAL (ACROSS), COLUMNS ARE VERTICAL(UP + DOWN)"
 TextValue:"ROWS ARE HORIZONTAL (ACROSS), COLUMNS ARE VERTICAL(UP + DOWN)"
 CarriageControl:NL
230 DIM B(9)
 NumericValue:9
 Declaration:B() -> .()
240 DIM A(3,3)
 NumericValue:3
 NumericValue:3
 Declaration:A(,) -> .(,)
250 PRINT
 CarriageControl:NL
260 PRINT "NEW GAME STARTED NOW............................."
 TextValue:"NEW GAME STARTED NOW............................."
 CarriageControl:NL
270 FOR J=1 TO 3
 control: Variable:J -> .
 start:   ["NumericValue:1"]
 end:     ["NumericValue:3"]
280 FOR I=1 TO 3
 control: Variable:I -> .
 start:   ["NumericValue:1"]
 end:     ["NumericValue:3"]
290 LET A(I,J)=0
 Variable:I -> .
 Variable:J -> .
 Variable:A(.,.) -> .
 NumericValue:0
 AssignmentOperator:= =. -> .
300 NEXT I
 Variable:I -> .
301 LET I=I-1
 Variable:I -> .
 Variable:I -> .
 NumericValue:1
 BinaryOperatorMinus:-(.,.) -> .
 AssignmentOperator:= . -> .
310 NEXT J
 Variable:J -> .
311 LET J=J-1
 Variable:J -> .
 Variable:J -> .
 NumericValue:1
 BinaryOperatorMinus:-(.,.) -> .
 AssignmentOperator:= . -> .
320 LET Z= 0
 Variable:Z -> .
 NumericValue:0
 AssignmentOperator:= =. -> .
330 PRINT "YOUR MOVE",
 TextValue:"YOUR MOVE"
 CarriageControl:,
340 INPUT R,C
 Variable:R -> .
 Variable:C -> .
350 PRINT
 CarriageControl:NL
360 IF R>3 THEN 620
 Variable:R -> .
 NumericValue:3
 BinaryOperatorGreater:>(.,.) -> ?
 LineNumber:620
370 IF C>3 THEN 620
 Variable:C -> .
 NumericValue:3
 BinaryOperatorGreater:>(.,.) -> ?
 LineNumber:620
380 IF A(R,C) <> 0 THEN 620 
 Variable:R -> .
 Variable:C -> .
 Variable:A(.,.) -> .
 NumericValue:0
 BinaryOperatorNotEqual:<>(.,.) -> ?
 LineNumber:620
390 LET A(R,C)=-1
 Variable:R -> .
 Variable:C -> .
 Variable:A(.,.) -> .
 NumericValue:1
 UnaryOperatorMinus:-(.) -> =.
 AssignmentOperator:= =. -> .
400 GOSUB 1660
 LineNumber:1660
410 IF Z =1 THEN 2070
 Variable:Z -> .
 NumericValue:1
 BinaryOperatorEqual:=(.,.) -> ?
 LineNumber:2070
420 REM MACHINE MOVE...
 Remark:MACHINE MOVE...
430 GOSUB 1100
 LineNumber:1100
440 REM TEST FOR GAME WIN...
 Remark:TEST FOR GAME WIN...
450 GOSUB 1660
 LineNumber:1660
460 IF Z=0 THEN 650
 Variable:Z -> .
 NumericValue:0
 BinaryOperatorEqual:=(.,.) -> ?
 LineNumber:650
470 REM PRINT GAME BOARD...
 Remark:PRINT GAME BOARD...
480 GO TO 490
 LineNumber:490
490 PRINT
 CarriageControl:NL
500 FOR K=1 TO 3
 control: Variable:K -> .
 start:   ["NumericValue:1"]
 end:     ["NumericValue:3"]
510 LET B=A(K,1)
 Variable:B -> .
 Variable:K -> .
 NumericValue:1
 Variable:A(.,.) -> .
 AssignmentOperator:= . -> .
520 LET D=A(K,2)
 Variable:D -> .
 Variable:K -> .
 NumericValue:2
 Variable:A(.,.) -> .
 AssignmentOperator:= . -> .
530 LET F=A(K,3)
 Variable:F -> .
 Variable:K -> .
 NumericValue:3
 Variable:A(.,.) -> .
 AssignmentOperator:= . -> .
540 GOSUB 840
 LineNumber:840
550 IF K>2 THEN 570
 Variable:K -> .
 NumericValue:2
 BinaryOperatorGreater:>(.,.) -> ?
 LineNumber:570
560 PRINT "***************"
 TextValue:"***************"
 CarriageControl:NL
570 NEXT K
 Variable:K -> .
571 LET K=K-1
 Variable:K -> .
 Variable:K -> .
 NumericValue:1
 BinaryOperatorMinus:-(.,.) -> .
 AssignmentOperator:= . -> .
580 PRINT
 CarriageControl:NL
590 IF Z <>0 THEN 2070
 Variable:Z -> .
 NumericValue:0
 BinaryOperatorNotEqual:<>(.,.) -> ?
 LineNumber:2070
600 GO TO 330
 LineNumber:330
610 STOP
 
620 PRINT "---- ILLEGAL MOVE  TRY AGAIN ---"
 TextValue:"---- ILLEGAL MOVE  TRY AGAIN ---"
 CarriageControl:NL
630 PRINT
 CarriageControl:NL
640 GO TO 330
 LineNumber:330
650LET T2=0
 Variable:T2 -> .
 NumericValue:0
 AssignmentOperator:= =. -> .
660 FOR J=1 TO 3
 control: Variable:J -> .
 start:   ["NumericValue:1"]
 end:     ["NumericValue:3"]
670 FOR I=1 TO 3
 control: Variable:I -> .
 start:   ["NumericValue:1"]
 end:     ["NumericValue:3"]
680 IF A(I,J)<>0 THEN 700
 Variable:I -> .
 Variable:J -> .
 Variable:A(.,.) -> .
 NumericValue:0
 BinaryOperatorNotEqual:<>(.,.) -> ?
 LineNumber:700
690 LET T2=T2+1
 Variable:T2 -> .
 Variable:T2 -> .
 NumericValue:1
 BinaryOperatorPlus:+(.,.) -> .
 AssignmentOperator:= . -> .
700 NEXT I
 Variable:I -> .
701 LET I=I-1
 Variable:I -> .
 Variable:I -> .
 NumericValue:1
 BinaryOperatorMinus:-(.,.) -> .
 AssignmentOperator:= . -> .
710 NEXT J
 Variable:J -> .
711 LET J=J-1
 Variable:J -> .
 Variable:J -> .
 NumericValue:1
 BinaryOperatorMinus:-(.,.) -> .
 AssignmentOperator:= . -> .
720 IF  T2>0 THEN 750
 Variable:T2 -> .
 NumericValue:0
 BinaryOperatorGreater:>(.,.) -> ?
 LineNumber:750
730 GOSUB 1340
 LineNumber:1340
740 GO TO 480
 LineNumber:480
750 IF T2>1 THEN 480
 Variable:T2 -> .
 NumericValue:1
 BinaryOperatorGreater:>(.,.) -> ?
 LineNumber:480
760 FOR J=1 TO 8
 WARNING: FORNEXT length exceeds limit 40
 control: Variable:J -> .
 start:   ["NumericValue:1"]
 end:     ["NumericValue:8"]
770 IF B(J)=-2 THEN 800
 Variable:J -> .
 Variable:B(.) -> .
 NumericValue:2
 UnaryOperatorMinus:-(.) -> =.
 BinaryOperatorEqual:=(.,.) -> ?
 LineNumber:800
780 NEXT J
 Variable:J -> .
781 LET J=J-1
 Variable:J -> .
 Variable:J -> .
 NumericValue:1
 BinaryOperatorMinus:-(.,.) -> .
 AssignmentOperator:= . -> .
790 GO TO 730
 LineNumber:730
800 GOSUB 2000
 LineNumber:2000
810 GO TO 480
 LineNumber:480
820 REM PRINT TIC-TAC-TOE BOARD ROW
 Remark:PRINT TIC-TAC-TOE BOARD ROW
830 REM
 Remark:
840 IF B<>0 THEN 910
 Variable:B -> .
 NumericValue:0
 BinaryOperatorNotEqual:<>(.,.) -> ?
 LineNumber:910
850 PRINT "    * ";
 TextValue:"    * "
 CarriageControl:;
860 IF D<>0 THEN 940
 Variable:D -> .
 NumericValue:0
 BinaryOperatorNotEqual:<>(.,.) -> ?
 LineNumber:940
870 PRINT "    * ";
 TextValue:"    * "
 CarriageControl:;
880 IF F<>0 THEN 970
 Variable:F -> .
 NumericValue:0
 BinaryOperatorNotEqual:<>(.,.) -> ?
 LineNumber:970
890 PRINT "    "
 TextValue:"    "
 CarriageControl:NL
900 GO TO 1070
 LineNumber:1070
910 IF B>0 THEN 1000
 Variable:B -> .
 NumericValue:0
 BinaryOperatorGreater:>(.,.) -> ?
 LineNumber:1000
920 PRINT "YOU * ";
 TextValue:"YOU * "
 CarriageControl:;
930 GO TO 860
 LineNumber:860
940 IF D>0 THEN 1020
 Variable:D -> .
 NumericValue:0
 BinaryOperatorGreater:>(.,.) -> ?
 LineNumber:1020
950 PRINT "YOU * ";
 TextValue:"YOU * "
 CarriageControl:;
960 GO TO 880
 LineNumber:880
970 IF F>0 THEN 1040
 Variable:F -> .
 NumericValue:0
 BinaryOperatorGreater:>(.,.) -> ?
 LineNumber:1040
980 PRINT "YOU"
 TextValue:"YOU"
 CarriageControl:NL
990 GO TO 900
 LineNumber:900
1000 PRINT "PDP * ";
 TextValue:"PDP * "
 CarriageControl:;
1010 GO TO 860
 LineNumber:860
1020 PRINT "PDP * ";
 TextValue:"PDP * "
 CarriageControl:;
1030 GO TO 880
 LineNumber:880
1040 PRINT "PDP"
 TextValue:"PDP"
 CarriageControl:NL
1050 GO TO900
 LineNumber:900
1060 REM PRINT LEGENDS..
 Remark:PRINT LEGENDS..
1070 PRINT "    *     * "
 TextValue:"    *     * "
 CarriageControl:NL
1080 RETURN
 
1090 REM PROGRAM TO MAKE MOVE FOR THE MACHINE....
 Remark:PROGRAM TO MAKE MOVE FOR THE MACHINE....
1100 LET M=INT(3.33*RND(1))
 WARNING: Inconsistent GOSUB origins
 WARNING: GOSUB length exceeds limit 40
 Variable:M -> .
 NumericValue:3.33
 NumericValue:1
 FunctionRnd:RND(.) -> .
 BinaryOperatorMultiply:*(.,.) -> .
 FunctionInt:INT(.) -> .
 AssignmentOperator:= . -> .
1110 LET N=INT(3.33333*RND(N))
 Variable:N -> .
 NumericValue:3.33333
 Variable:N -> .
 FunctionRnd:RND(.) -> .
 BinaryOperatorMultiply:*(.,.) -> .
 FunctionInt:INT(.) -> .
 AssignmentOperator:= . -> .
1120 IF M=0 THEN 1100
 Variable:M -> .
 NumericValue:0
 BinaryOperatorEqual:=(.,.) -> ?
 LineNumber:1100
1130 IF M>3 THEN 1100
 Variable:M -> .
 NumericValue:3
 BinaryOperatorGreater:>(.,.) -> ?
 LineNumber:1100
1140 IF N=0 THEN 1110
 Variable:N -> .
 NumericValue:0
 BinaryOperatorEqual:=(.,.) -> ?
 LineNumber:1110
1150 IF N>3 THEN 1110
 Variable:N -> .
 NumericValue:3
 BinaryOperatorGreater:>(.,.) -> ?
 LineNumber:1110
1160 LET C(2)=M
 NumericValue:2
 Variable:C(.) -> .
 Variable:M -> .
 AssignmentOperator:= . -> .
1170 LET D(2)=N
 NumericValue:2
 Variable:D(.) -> .
 Variable:N -> .
 AssignmentOperator:= . -> .
1180 LET C(3)=N
 NumericValue:3
 Variable:C(.) -> .
 Variable:N -> .
 AssignmentOperator:= . -> .
1190 LET D(3)=M
 NumericValue:3
 Variable:D(.) -> .
 Variable:M -> .
 AssignmentOperator:= . -> .
1200 FOR I=1 TO 8
 control: Variable:I -> .
 start:   ["NumericValue:1"]
 end:     ["NumericValue:8"]
1210 IF B(I)>1 THEN 1370
 Variable:I -> .
 Variable:B(.) -> .
 NumericValue:1
 BinaryOperatorGreater:>(.,.) -> ?
 LineNumber:1370
1220 NEXT I
 Variable:I -> .
1221 LET I=I-1
 Variable:I -> .
 Variable:I -> .
 NumericValue:1
 BinaryOperatorMinus:-(.,.) -> .
 AssignmentOperator:= . -> .
1230 FOR I=1 TO 8
 control: Variable:I -> .
 start:   ["NumericValue:1"]
 end:     ["NumericValue:8"]
1240 IF B(I)<-1 THEN 1370
 Variable:I -> .
 Variable:B(.) -> .
 NumericValue:1
 UnaryOperatorMinus:-(.) -> =.
 BinaryOperatorLess:<(.,.) -> ?
 LineNumber:1370
1250 NEXT I
 Variable:I -> .
1251 LET I=I-1
 Variable:I -> .
 Variable:I -> .
 NumericValue:1
 BinaryOperatorMinus:-(.,.) -> .
 AssignmentOperator:= . -> .
1260 IF R+C=0 THEN 1550
 Variable:R -> .
 Variable:C -> .
 BinaryOperatorPlus:+(.,.) -> .
 NumericValue:0
 BinaryOperatorEqual:=(.,.) -> ?
 LineNumber:1550
1270 FOR K=1 TO 11
 control: Variable:K -> .
 start:   ["NumericValue:1"]
 end:     ["NumericValue:11"]
1280 LET I=C(K)
 Variable:I -> .
 Variable:K -> .
 Variable:C(.) -> .
 AssignmentOperator:= . -> .
1300 IF A(I,J)<>0 THEN 1330
 Variable:I -> .
 Variable:J -> .
 Variable:A(.,.) -> .
 NumericValue:0
 BinaryOperatorNotEqual:<>(.,.) -> ?
 LineNumber:1330
1310 LET A(I,J)=1
 Variable:I -> .
 Variable:J -> .
 Variable:A(.,.) -> .
 NumericValue:1
 AssignmentOperator:= =. -> .
1320 GO TO 1360
 LineNumber:1360
1330 NEXT K
 Variable:K -> .
1331 LET K=K-1
 Variable:K -> .
 Variable:K -> .
 NumericValue:1
 BinaryOperatorMinus:-(.,.) -> .
 AssignmentOperator:= . -> .
1340 PRINT " ... TIE GAME ... "
 WARNING: Inconsistent GOSUB origins
 WARNING: Multiple GOSUB entry points
 TextValue:" ... TIE GAME ... "
 CarriageControl:NL
1350 LET Z=3
 WARNING: Multiple GOSUB entry points
 Variable:Z -> .
 NumericValue:3
 AssignmentOperator:= =. -> .
1360 RETURN
 WARNING: Multiple GOSUB entry points
 
1370 IF I>3 THEN 1440
 Variable:I -> .
 NumericValue:3
 BinaryOperatorGreater:>(.,.) -> ?
 LineNumber:1440
1380 FOR J=1 TO 3
 control: Variable:J -> .
 start:   ["NumericValue:1"]
 end:     ["NumericValue:3"]
1390 IF A(I,J)=0 THEN 1420
 Variable:I -> .
 Variable:J -> .
 Variable:A(.,.) -> .
 NumericValue:0
 BinaryOperatorEqual:=(.,.) -> ?
 LineNumber:1420
1400 NEXT J
 Variable:J -> .
1401 LET J=J-1
 Variable:J -> .
 Variable:J -> .
 NumericValue:1
 BinaryOperatorMinus:-(.,.) -> .
 AssignmentOperator:= . -> .
1410 GO TO 1360
 LineNumber:1360
1420 LET A(I,J)=1
 Variable:I -> .
 Variable:J -> .
 Variable:A(.,.) -> .
 NumericValue:1
 AssignmentOperator:= =. -> .
1430 GO TO 1360
 LineNumber:1360
1440 IF I>6 THEN 1510 
 Variable:I -> .
 NumericValue:6
 BinaryOperatorGreater:>(.,.) -> ?
 LineNumber:1510
1450 FOR J=1 TO 3
 control: Variable:J -> .
 start:   ["NumericValue:1"]
 end:     ["NumericValue:3"]
1460 IF A(J,I-3)=0 THEN 1490
 Variable:J -> .
 Variable:I -> .
 NumericValue:3
 BinaryOperatorMinus:-(.,.) -> .
 Variable:A(.,.) -> .
 NumericValue:0
 BinaryOperatorEqual:=(.,.) -> ?
 LineNumber:1490
1470 NEXT J
 Variable:J -> .
1471 LET J=J-1
 Variable:J -> .
 Variable:J -> .
 NumericValue:1
 BinaryOperatorMinus:-(.,.) -> .
 AssignmentOperator:= . -> .
1480 GO TO 1360
 LineNumber:1360
1490 LET A(J,I-3)=1
 Variable:J -> .
 Variable:I -> .
 NumericValue:3
 BinaryOperatorMinus:-(.,.) -> .
 Variable:A(.,.) -> .
 NumericValue:1
 AssignmentOperator:= =. -> .
1500 GO TO 1360
 LineNumber:1360
1510 IF I>7 THEN 1550
 Variable:I -> .
 NumericValue:7
 BinaryOperatorGreater:>(.,.) -> ?
 LineNumber:1550
1520 FOR J=1 TO 3
 control: Variable:J -> .
 start:   ["NumericValue:1"]
 end:     ["NumericValue:3"]
1530 IF A(J,J)=0 THEN 1590
 Variable:J -> .
 Variable:J -> .
 Variable:A(.,.) -> .
 NumericValue:0
 BinaryOperatorEqual:=(.,.) -> ?
 LineNumber:1590
1540 NEXT J
 Variable:J -> .
1541 LET J=J-1
 Variable:J -> .
 Variable:J -> .
 NumericValue:1
 BinaryOperatorMinus:-(.,.) -> .
 AssignmentOperator:= . -> .
1550 IF A(1,3)=0 THEN 1610
 NumericValue:1
 NumericValue:3
 Variable:A(.,.) -> .
 NumericValue:0
 BinaryOperatorEqual:=(.,.) -> ?
 LineNumber:1610
1560 IF A(3,1)=0 THEN 1630
 NumericValue:3
 NumericValue:1
 Variable:A(.,.) -> .
 NumericValue:0
 BinaryOperatorEqual:=(.,.) -> ?
 LineNumber:1630
1570 LET A(2,2)=1
 NumericValue:2
 NumericValue:2
 Variable:A(.,.) -> .
 NumericValue:1
 AssignmentOperator:= =. -> .
1580 GO TO 1360
 LineNumber:1360
1590 LET A(J,J)=1
 Variable:J -> .
 Variable:J -> .
 Variable:A(.,.) -> .
 NumericValue:1
 AssignmentOperator:= =. -> .
1600 GO TO 1360 
 LineNumber:1360
1610 LET A(1,3)=1
 NumericValue:1
 NumericValue:3
 Variable:A(.,.) -> .
 NumericValue:1
 AssignmentOperator:= =. -> .
1620 GO TO 1360
 LineNumber:1360
1630 LET A(3,1)=1
 NumericValue:3
 NumericValue:1
 Variable:A(.,.) -> .
 NumericValue:1
 AssignmentOperator:= =. -> .
1640 GO TO 1360
 LineNumber:1360
1650 REM PROGRAM TO TEST FOR GAME WINNER....
 Remark:PROGRAM TO TEST FOR GAME WINNER....
1660 LET T1=0
 WARNING: GOSUB length exceeds limit 40
 Variable:T1 -> .
 NumericValue:0
 AssignmentOperator:= =. -> .
1670 FOR J=1 TO 9
 control: Variable:J -> .
 start:   ["NumericValue:1"]
 end:     ["NumericValue:9"]
1680 LET B(J)=0
 Variable:J -> .
 Variable:B(.) -> .
 NumericValue:0
 AssignmentOperator:= =. -> .
1690 NEXT J
 Variable:J -> .
1691 LET J=J-1
 Variable:J -> .
 Variable:J -> .
 NumericValue:1
 BinaryOperatorMinus:-(.,.) -> .
 AssignmentOperator:= . -> .
1700 FOR J=1 TO 3
 control: Variable:J -> .
 start:   ["NumericValue:1"]
 end:     ["NumericValue:3"]
1710 FOR I=1 TO 3
 control: Variable:I -> .
 start:   ["NumericValue:1"]
 end:     ["NumericValue:3"]
1720 IF A(J,1)<>A(J,I) THEN 1750
 Variable:J -> .
 NumericValue:1
 Variable:A(.,.) -> .
 Variable:J -> .
 Variable:I -> .
 Variable:A(.,.) -> .
 BinaryOperatorNotEqual:<>(.,.) -> ?
 LineNumber:1750
1730 NEXT I
 Variable:I -> .
1731 LET I=I-1
 Variable:I -> .
 Variable:I -> .
 NumericValue:1
 BinaryOperatorMinus:-(.,.) -> .
 AssignmentOperator:= . -> .
1740 LET T1=A(J,I)
 Variable:T1 -> .
 Variable:J -> .
 Variable:I -> .
 Variable:A(.,.) -> .
 AssignmentOperator:= . -> .
1750 NEXT J
 Variable:J -> .
1751 LET J=J-1
 Variable:J -> .
 Variable:J -> .
 NumericValue:1
 BinaryOperatorMinus:-(.,.) -> .
 AssignmentOperator:= . -> .
1760 FOR J=1 TO 3
 control: Variable:J -> .
 start:   ["NumericValue:1"]
 end:     ["NumericValue:3"]
1770 FOR I=1 TO 3
 control: Variable:I -> .
 start:   ["NumericValue:1"]
 end:     ["NumericValue:3"]
1780 IF A(1,J)<>A(I,J) THEN 1810
 NumericValue:1
 Variable:J -> .
 Variable:A(.,.) -> .
 Variable:I -> .
 Variable:J -> .
 Variable:A(.,.) -> .
 BinaryOperatorNotEqual:<>(.,.) -> ?
 LineNumber:1810
1790 NEXT I
 Variable:I -> .
1791 LET I=I-1
 Variable:I -> .
 Variable:I -> .
 NumericValue:1
 BinaryOperatorMinus:-(.,.) -> .
 AssignmentOperator:= . -> .
1800 LET T1=A(I,J)
 Variable:T1 -> .
 Variable:I -> .
 Variable:J -> .
 Variable:A(.,.) -> .
 AssignmentOperator:= . -> .
1810 NEXT J
 Variable:J -> .
1811 LET J=J-1
 Variable:J -> .
 Variable:J -> .
 NumericValue:1
 BinaryOperatorMinus:-(.,.) -> .
 AssignmentOperator:= . -> .
1820 IF A(1,1)=A(3,3) THEN 1930
 NumericValue:1
 NumericValue:1
 Variable:A(.,.) -> .
 NumericValue:3
 NumericValue:3
 Variable:A(.,.) -> .
 BinaryOperatorEqual:=(.,.) -> ?
 LineNumber:1930
1830 IF A(3,1)=A(1,3) THEN 1970
 NumericValue:3
 NumericValue:1
 Variable:A(.,.) -> .
 NumericValue:1
 NumericValue:3
 Variable:A(.,.) -> .
 BinaryOperatorEqual:=(.,.) -> ?
 LineNumber:1970
1840 IF T1<>0 THEN 1990
 Variable:T1 -> .
 NumericValue:0
 BinaryOperatorNotEqual:<>(.,.) -> ?
 LineNumber:1990
1850 FOR J=1 TO 3
 WARNING: Multiple GOSUB entry points
 control: Variable:J -> .
 start:   ["NumericValue:1"]
 end:     ["NumericValue:3"]
1860 FOR I=1 TO 3
 WARNING: Multiple GOSUB entry points
 control: Variable:I -> .
 start:   ["NumericValue:1"]
 end:     ["NumericValue:3"]
1870 LET B(J)=B(J)+A(J,I)
 WARNING: Multiple GOSUB entry points
 Variable:J -> .
 Variable:B(.) -> .
 Variable:J -> .
 Variable:B(.) -> .
 Variable:J -> .
 Variable:I -> .
 Variable:A(.,.) -> .
 BinaryOperatorPlus:+(.,.) -> .
 AssignmentOperator:= . -> .
1880 LET B(J+3)=B(J+3)+A(I,J)
 WARNING: Multiple GOSUB entry points
 Variable:J -> .
 NumericValue:3
 BinaryOperatorPlus:+(.,.) -> .
 Variable:B(.) -> .
 Variable:J -> .
 NumericValue:3
 BinaryOperatorPlus:+(.,.) -> .
 Variable:B(.) -> .
 Variable:I -> .
 Variable:J -> .
 Variable:A(.,.) -> .
 BinaryOperatorPlus:+(.,.) -> .
 AssignmentOperator:= . -> .
1890 NEXT I
 WARNING: Multiple GOSUB entry points
 Variable:I -> .
1891 LET I=I-1
 WARNING: Multiple GOSUB entry points
 Variable:I -> .
 Variable:I -> .
 NumericValue:1
 BinaryOperatorMinus:-(.,.) -> .
 AssignmentOperator:= . -> .
1900 NEXT J
 WARNING: Multiple GOSUB entry points
 Variable:J -> .
1901 LET J=J-1
 WARNING: Multiple GOSUB entry points
 Variable:J -> .
 Variable:J -> .
 NumericValue:1
 BinaryOperatorMinus:-(.,.) -> .
 AssignmentOperator:= . -> .
1910 LET B(7)=A(1,1)+A(2,2)+A(3,3)
 WARNING: Multiple GOSUB entry points
 NumericValue:7
 Variable:B(.) -> .
 NumericValue:1
 NumericValue:1
 Variable:A(.,.) -> .
 NumericValue:2
 NumericValue:2
 Variable:A(.,.) -> .
 BinaryOperatorPlus:+(.,.) -> .
 NumericValue:3
 NumericValue:3
 Variable:A(.,.) -> .
 BinaryOperatorPlus:+(.,.) -> .
 AssignmentOperator:= . -> .
1920 RETURN
 WARNING: Multiple GOSUB entry points
 
1930 IF A(2,2)=A(3,3) THEN 1950
 NumericValue:2
 NumericValue:2
 Variable:A(.,.) -> .
 NumericValue:3
 NumericValue:3
 Variable:A(.,.) -> .
 BinaryOperatorEqual:=(.,.) -> ?
 LineNumber:1950
1940 GO TO 1830
 LineNumber:1830
1950 LET T1=A(2,2)
 Variable:T1 -> .
 NumericValue:2
 NumericValue:2
 Variable:A(.,.) -> .
 AssignmentOperator:= . -> .
1960 GO TO 1840
 LineNumber:1840
1970 IF A(2,2)=A(1,3) THEN 1950
 NumericValue:2
 NumericValue:2
 Variable:A(.,.) -> .
 NumericValue:1
 NumericValue:3
 Variable:A(.,.) -> .
 BinaryOperatorEqual:=(.,.) -> ?
 LineNumber:1950
1980 GO TO 1840
 LineNumber:1840
1990 IF T1>0 THEN 2030
 Variable:T1 -> .
 NumericValue:0
 BinaryOperatorGreater:>(.,.) -> ?
 LineNumber:2030
2000 PRINT " ...YOU WIN THIS TIME..."
 WARNING: Inconsistent GOSUB origins
 WARNING: Multiple GOSUB entry points
 TextValue:" ...YOU WIN THIS TIME..."
 CarriageControl:NL
2010 LET Z=1
 WARNING: Multiple GOSUB entry points
 Variable:Z -> .
 NumericValue:1
 AssignmentOperator:= =. -> .
2020 GO TO 1850
 WARNING: Multiple GOSUB entry points
 LineNumber:1850
2030 PRINT " ... THE PDP-8 WINS THIS TIME ..."
 TextValue:" ... THE PDP-8 WINS THIS TIME ..."
 CarriageControl:NL
2040 LET Z=2
 Variable:Z -> .
 NumericValue:2
 AssignmentOperator:= =. -> .
2050 GO TO 1850
 LineNumber:1850
2060 REM END OF TEST WINNER PROGRAM......
 Remark:END OF TEST WINNER PROGRAM......
2070 PRINT "DO YOU WANT TO PLAY ANOTHER GAME: YES(1) NO(0)";
 TextValue:"DO YOU WANT TO PLAY ANOTHER GAME: YES(1) NO(0)"
 CarriageControl:;
2080 INPUT X1
 Variable:X1 -> .
2090 IF X1 = 1 THEN 250
 Variable:X1 -> .
 NumericValue:1
 BinaryOperatorEqual:=(.,.) -> ?
 LineNumber:250
2100 IF X1 = 0 THEN 2130
 Variable:X1 -> .
 NumericValue:0
 BinaryOperatorEqual:=(.,.) -> ?
 LineNumber:2130
2110 PRINT "I SAID ONE OR ZERO, TRY AGAIN"
 TextValue:"I SAID ONE OR ZERO, TRY AGAIN"
 CarriageControl:NL
2120 GO TO 2080
 LineNumber:2080
2130 PRINT"IT'S BEEN FUN, COME AGAIN SOMETIME"
 TextValue:"IT'S BEEN FUN, COME AGAIN SOMETIME"
 CarriageControl:NL
2140 GO TO 2160
 LineNumber:2160
2150 DATA 2,2,0,0,0,0,1,1,3,3,1,3,3,1,1,2,3,2,2,3,2,1
 NumericValue:2
 NumericValue:2
 NumericValue:0
 NumericValue:0
 NumericValue:0
 NumericValue:0
 NumericValue:1
 NumericValue:1
 NumericValue:3
 NumericValue:3
 NumericValue:1
 NumericValue:3
 NumericValue:3
 NumericValue:1
 NumericValue:1
 NumericValue:2
 NumericValue:3
 NumericValue:2
 NumericValue:2
 NumericValue:3
 NumericValue:2
 NumericValue:1
2160 REM CHAIN "DEMON "
 Remark:CHAIN "DEMON "
2170 END
 WARNING: Terminating statement in FOR/NEXT
 

