1 REM "  QUBIC-  "
 Remark:"  QUBIC-  "
5 PRINT "DO YOU WANT INSTRUCTIONS";
 TextValue:"DO YOU WANT INSTRUCTIONS"
 CarriageControl:;
6 INPUT C$
 Variable:C$ -> $
7 IF C$="NO" THEN 20
 Variable:C$ -> $
 TextValue:"NO"
 BinaryOperatorEqual:=($,$) -> ?
 LineNumber:20
8 IF C$="YES" THEN 13
 Variable:C$ -> $
 TextValue:"YES"
 BinaryOperatorEqual:=($,$) -> ?
 LineNumber:13
9 PRINT "INCORRECT ANSWER. PLEASE TYPE 'YES' OR 'NO'";
 TextValue:"INCORRECT ANSWER. PLEASE TYPE 'YES' OR 'NO'"
 CarriageControl:;
10 GOTO 6
 LineNumber:6
13 PRINT "THE GAME IS TIC-TAC-TOE IN A 4 X 4 X 4 CUBE."
 TextValue:"THE GAME IS TIC-TAC-TOE IN A 4 X 4 X 4 CUBE."
 CarriageControl:NL
14 PRINT "EACH MOVE IS INDICATED BY A 3 DIGIT NUMBER, WITH EACH"
 TextValue:"EACH MOVE IS INDICATED BY A 3 DIGIT NUMBER, WITH EACH"
 CarriageControl:NL
15 PRINT "DIGIT BETWEEN 1 AND 4 INCLUSIVE. THE DIGITS INDICATE THE"
 TextValue:"DIGIT BETWEEN 1 AND 4 INCLUSIVE. THE DIGITS INDICATE THE"
 CarriageControl:NL
16 PRINT "LEVEL, COLUMN, AND ROW, RESPECTIVELY, OF THE OCCUPIED PLACE,"
 TextValue:"LEVEL, COLUMN, AND ROW, RESPECTIVELY, OF THE OCCUPIED PLACE,"
 CarriageControl:NL
20 DIM X(64),L(76),M(76,4),Y(16)
 NumericValue:64
 Declaration:X() -> .()
 NumericValue:76
 Declaration:L() -> .()
 NumericValue:76
 NumericValue:4
 Declaration:M(,) -> .(,)
 NumericValue:16
 Declaration:Y() -> .()
21 FOR I=1 TO 16
 control: Variable:I -> .
 start:   ["NumericValue:1"]
 end:     ["NumericValue:16"]
22 READ Y(I)
 Variable:I -> .
 Variable:Y(.) -> .
23 NEXT I
 Variable:I -> .
24FOR I=1 TO 76
 control: Variable:I -> .
 start:   ["NumericValue:1"]
 end:     ["NumericValue:76"]
25FOR J = 1 TO 4
 control: Variable:J -> .
 start:   ["NumericValue:1"]
 end:     ["NumericValue:4"]
26 READM(I,J)
 Variable:I -> .
 Variable:J -> .
 Variable:M(.,.) -> .
27 NEXT J 
 Variable:J -> .
28 NEXT I
 Variable:I -> .
35 FOR I = 1 TO 64
 WARNING: FOR/NEXT nesting exceeds limit 3
 control: Variable:I -> .
 start:   ["NumericValue:1"]
 end:     ["NumericValue:64"]
40 LET X (I) =0
 Variable:I -> .
 Variable:X(.) -> .
 NumericValue:0
 AssignmentOperator:= =. -> .
50 NEXT I
 Variable:I -> .
54 LET Z=1
 Variable:Z -> .
 NumericValue:1
 AssignmentOperator:= =. -> .
55 PRINT "DO YOU WANT TO MOVE FIRST";
 TextValue:"DO YOU WANT TO MOVE FIRST"
 CarriageControl:;
60 INPUT S$
 Variable:S$ -> $
66 IF S$="NO" THEN 110
 Variable:S$ -> $
 TextValue:"NO"
 BinaryOperatorEqual:=($,$) -> ?
 LineNumber:110
67 IF S$="YES" THEN 70
 Variable:S$ -> $
 TextValue:"YES"
 BinaryOperatorEqual:=($,$) -> ?
 LineNumber:70
68 PRINT "INCORRECT ANSWER. PLEASE TYPE 'YES' OR 'NO'";
 TextValue:"INCORRECT ANSWER. PLEASE TYPE 'YES' OR 'NO'"
 CarriageControl:;
69 GOTO 60
 LineNumber:60
70 PRINT " "
 TextValue:" "
 CarriageControl:NL
72 PRINT "YOUR MOVE";
 TextValue:"YOUR MOVE"
 CarriageControl:;
80INPUTJ1
 Variable:J1 -> .
85 GOSUB 1800
 LineNumber:1800
90 LETK1=INT(J1/100)
 Variable:K1 -> .
 Variable:J1 -> .
 NumericValue:100
 BinaryOperatorDivide:/(.,.) -> .
 FunctionInt:INT(.) -> .
 AssignmentOperator:= . -> .
95 LET J2=(J1-K1*100)
 Variable:J2 -> .
 Variable:J1 -> .
 Variable:K1 -> .
 NumericValue:100
 BinaryOperatorMultiply:*(.,.) -> .
 BinaryOperatorMinus:-(.,.) -> .
 AssignmentOperator:= . -> .
96 LET K2=INT(J2/10)
 Variable:K2 -> .
 Variable:J2 -> .
 NumericValue:10
 BinaryOperatorDivide:/(.,.) -> .
 FunctionInt:INT(.) -> .
 AssignmentOperator:= . -> .
97 LET K3= J1 - K1*100 -K2*10
 Variable:K3 -> .
 Variable:J1 -> .
 Variable:K1 -> .
 NumericValue:100
 BinaryOperatorMultiply:*(.,.) -> .
 BinaryOperatorMinus:-(.,.) -> .
 Variable:K2 -> .
 NumericValue:10
 BinaryOperatorMultiply:*(.,.) -> .
 BinaryOperatorMinus:-(.,.) -> .
 AssignmentOperator:= . -> .
98 LET M=16*K1+4*K2+K3-20
 Variable:M -> .
 NumericValue:16
 Variable:K1 -> .
 BinaryOperatorMultiply:*(.,.) -> .
 NumericValue:4
 Variable:K2 -> .
 BinaryOperatorMultiply:*(.,.) -> .
 BinaryOperatorPlus:+(.,.) -> .
 Variable:K3 -> .
 BinaryOperatorPlus:+(.,.) -> .
 NumericValue:20
 BinaryOperatorMinus:-(.,.) -> .
 AssignmentOperator:= . -> .
99 IF X(M)=0 THEN 109
 Variable:M -> .
 Variable:X(.) -> .
 NumericValue:0
 BinaryOperatorEqual:=(.,.) -> ?
 LineNumber:109
100 PRINT "THAT SQUARE IS USED, TRY AGAIN"
 TextValue:"THAT SQUARE IS USED, TRY AGAIN"
 CarriageControl:NL
101 GOTO 70
 LineNumber:70
109 LET X(M)=1
 Variable:M -> .
 Variable:X(.) -> .
 NumericValue:1
 AssignmentOperator:= =. -> .
110 GOSUB 1050
 LineNumber:1050
180 FOR J=1 TO 3
 WARNING: FORNEXT length exceeds limit 40
 WARNING: FOR/NEXT nesting exceeds limit 3
 control: Variable:J -> .
 start:   ["NumericValue:1"]
 end:     ["NumericValue:3"]
190 FOR I=1 TO 76
 WARNING: FORNEXT length exceeds limit 40
 WARNING: FOR/NEXT nesting exceeds limit 3
 control: Variable:I -> .
 start:   ["NumericValue:1"]
 end:     ["NumericValue:76"]
200 IF J=1 THEN 210
 Variable:J -> .
 NumericValue:1
 BinaryOperatorEqual:=(.,.) -> ?
 LineNumber:210
201 IF J=2 THEN 220
 Variable:J -> .
 NumericValue:2
 BinaryOperatorEqual:=(.,.) -> ?
 LineNumber:220
203 IF J=3 THEN 235
 Variable:J -> .
 NumericValue:3
 BinaryOperatorEqual:=(.,.) -> ?
 LineNumber:235
205 NEXT I
 Variable:I -> .
206 NEXTJ
 Variable:J -> .
207 GOTO 400
 LineNumber:400
210 IF L(I)<>4 THEN 205
 Variable:I -> .
 Variable:L(.) -> .
 NumericValue:4
 BinaryOperatorNotEqual:<>(.,.) -> ?
 LineNumber:205
211 PRINT "YOU WIN AS FOLLOWS";
 TextValue:"YOU WIN AS FOLLOWS"
 CarriageControl:;
212 FOR J=1 TO 4
 WARNING: FOR/NEXT nesting exceeds limit 3
 control: Variable:J -> .
 start:   ["NumericValue:1"]
 end:     ["NumericValue:4"]
213 LET M=M(I,J)
 Variable:M -> .
 Variable:I -> .
 Variable:J -> .
 Variable:M(.,.) -> .
 AssignmentOperator:= . -> .
214 GOSUB 1000
 LineNumber:1000
216 NEXT J
 Variable:J -> .
217 GOTO 500
 LineNumber:500
220 IF L(I)<>15 THEN 205
 Variable:I -> .
 Variable:L(.) -> .
 NumericValue:15
 BinaryOperatorNotEqual:<>(.,.) -> ?
 LineNumber:205
221 FOR J=1 TO 4
 WARNING: FOR/NEXT nesting exceeds limit 3
 control: Variable:J -> .
 start:   ["NumericValue:1"]
 end:     ["NumericValue:4"]
222 LET M=M(I,J)
 Variable:M -> .
 Variable:I -> .
 Variable:J -> .
 Variable:M(.,.) -> .
 AssignmentOperator:= . -> .
223 IF X(M)<>0 THEN 227
 Variable:M -> .
 Variable:X(.) -> .
 NumericValue:0
 BinaryOperatorNotEqual:<>(.,.) -> ?
 LineNumber:227
224 LET X(M)=5
 Variable:M -> .
 Variable:X(.) -> .
 NumericValue:5
 AssignmentOperator:= =. -> .
225 PRINT "MACHINE MOVES TO";
 TextValue:"MACHINE MOVES TO"
 CarriageControl:;
226 GOSUB 1000
 LineNumber:1000
227 NEXT J
 Variable:J -> .
228 PRINT ", AND WINS AS FOLLOWS"
 TextValue:", AND WINS AS FOLLOWS"
 CarriageControl:NL
229 FOR J=1 TO 4
 WARNING: FOR/NEXT nesting exceeds limit 3
 control: Variable:J -> .
 start:   ["NumericValue:1"]
 end:     ["NumericValue:4"]
230 LET M=M(I,J)
 Variable:M -> .
 Variable:I -> .
 Variable:J -> .
 Variable:M(.,.) -> .
 AssignmentOperator:= . -> .
231 GOSUB 1000
 LineNumber:1000
233 NEXT J
 Variable:J -> .
234 GOTO 500
 LineNumber:500
235 IF L(I)<>3 THEN 205
 Variable:I -> .
 Variable:L(.) -> .
 NumericValue:3
 BinaryOperatorNotEqual:<>(.,.) -> ?
 LineNumber:205
236 PRINT "NICE TRY MACHINE MOVES TO";
 TextValue:"NICE TRY MACHINE MOVES TO"
 CarriageControl:;
237 FOR J=1 TO 4
 WARNING: FORNEXT length exceeds limit 40
 WARNING: FOR/NEXT nesting exceeds limit 3
 control: Variable:J -> .
 start:   ["NumericValue:1"]
 end:     ["NumericValue:4"]
238 LET M=M(I,J)
 Variable:M -> .
 Variable:I -> .
 Variable:J -> .
 Variable:M(.,.) -> .
 AssignmentOperator:= . -> .
239 IF X(M)<>0 THEN 245
 Variable:M -> .
 Variable:X(.) -> .
 NumericValue:0
 BinaryOperatorNotEqual:<>(.,.) -> ?
 LineNumber:245
240 LET X(M)=5
 Variable:M -> .
 Variable:X(.) -> .
 NumericValue:5
 AssignmentOperator:= =. -> .
241 GOSUB 1000
 LineNumber:1000
243 GOTO 70
 LineNumber:70
245 NEXT J
 Variable:J -> .
248 GOTO 400
 LineNumber:400
250 FOR I = 1 TO 76
 WARNING: FORNEXT length exceeds limit 40
 control: Variable:I -> .
 start:   ["NumericValue:1"]
 end:     ["NumericValue:76"]
251 LET L(I)=X(M(I,1))+X(M(I,2))+X(M(I,3))+X(M(I,4))
 Variable:I -> .
 Variable:L(.) -> .
 Variable:I -> .
 NumericValue:1
 Variable:M(.,.) -> .
 Variable:X(.) -> .
 Variable:I -> .
 NumericValue:2
 Variable:M(.,.) -> .
 Variable:X(.) -> .
 BinaryOperatorPlus:+(.,.) -> .
 Variable:I -> .
 NumericValue:3
 Variable:M(.,.) -> .
 Variable:X(.) -> .
 BinaryOperatorPlus:+(.,.) -> .
 Variable:I -> .
 NumericValue:4
 Variable:M(.,.) -> .
 Variable:X(.) -> .
 BinaryOperatorPlus:+(.,.) -> .
 AssignmentOperator:= . -> .
252 LET L = L(I)
 Variable:L -> .
 Variable:I -> .
 Variable:L(.) -> .
 AssignmentOperator:= . -> .
255 IF L <2 THEN 290
 Variable:L -> .
 NumericValue:2
 BinaryOperatorLess:<(.,.) -> ?
 LineNumber:290
260 IF L>=3 THEN 290
 Variable:L -> .
 NumericValue:3
 BinaryOperatorGreaterEqual:>=(.,.) -> ?
 LineNumber:290
265 IF L>2 THEN 1600
 Variable:L -> .
 NumericValue:2
 BinaryOperatorGreater:>(.,.) -> ?
 LineNumber:1600
270 FOR J = 1 TO 4
 control: Variable:J -> .
 start:   ["NumericValue:1"]
 end:     ["NumericValue:4"]
275 IF X(M(I,J))<>0 THEN 285
 Variable:I -> .
 Variable:J -> .
 Variable:M(.,.) -> .
 Variable:X(.) -> .
 NumericValue:0
 BinaryOperatorNotEqual:<>(.,.) -> ?
 LineNumber:285
280 LET X(M(I,J))=1/8
 Variable:I -> .
 Variable:J -> .
 Variable:M(.,.) -> .
 Variable:X(.) -> .
 NumericValue:1
 NumericValue:8
 BinaryOperatorDivide:/(.,.) -> =.
 AssignmentOperator:= =. -> .
285 NEXT J
 Variable:J -> .
290 NEXT I
 Variable:I -> .
295 GOSUB 1050
 LineNumber:1050
300 FOR I = 1 TO 76
 WARNING: FORNEXT length exceeds limit 40
 control: Variable:I -> .
 start:   ["NumericValue:1"]
 end:     ["NumericValue:76"]
305 IF L(I)=1/2 THEN 1700
 Variable:I -> .
 Variable:L(.) -> .
 NumericValue:1
 NumericValue:2
 BinaryOperatorDivide:/(.,.) -> =.
 BinaryOperatorEqual:=(.,.) -> ?
 LineNumber:1700
310 IF L(I)=1 + 3/8 THEN 1700
 Variable:I -> .
 Variable:L(.) -> .
 NumericValue:1
 NumericValue:3
 NumericValue:8
 BinaryOperatorDivide:/(.,.) -> =.
 BinaryOperatorPlus:+(.,.) -> =.
 BinaryOperatorEqual:=(.,.) -> ?
 LineNumber:1700
315 NEXT I
 Variable:I -> .
320 GOTO 1300
 LineNumber:1300
360LET Z = 1
 Variable:Z -> .
 NumericValue:1
 AssignmentOperator:= =. -> .
362 IF X(Y(Z))=0 THEN 380
 Variable:Z -> .
 Variable:Y(.) -> .
 Variable:X(.) -> .
 NumericValue:0
 BinaryOperatorEqual:=(.,.) -> ?
 LineNumber:380
365 LET Z=Z+1
 Variable:Z -> .
 Variable:Z -> .
 NumericValue:1
 BinaryOperatorPlus:+(.,.) -> .
 AssignmentOperator:= . -> .
368 IF Z<>17 THEN 362
 Variable:Z -> .
 NumericValue:17
 BinaryOperatorNotEqual:<>(.,.) -> ?
 LineNumber:362
375 GOTO 1200
 LineNumber:1200
380 LET M=Y(Z)
 Variable:M -> .
 Variable:Z -> .
 Variable:Y(.) -> .
 AssignmentOperator:= . -> .
381 LET X(M)=5
 Variable:M -> .
 Variable:X(.) -> .
 NumericValue:5
 AssignmentOperator:= =. -> .
385 PRINT "MACHINE MOVES TO";
 TextValue:"MACHINE MOVES TO"
 CarriageControl:;
389 GOSUB 1000
 LineNumber:1000
390 GOTO 70
 LineNumber:70
400 LET X=X
 Variable:X -> .
 Variable:X -> .
 AssignmentOperator:= . -> .
410 FOR I=1 TO 76
 WARNING: FORNEXT length exceeds limit 40
 WARNING: FOR/NEXT nesting exceeds limit 3
 control: Variable:I -> .
 start:   ["NumericValue:1"]
 end:     ["NumericValue:76"]
412 LET L(I)=X(M(I,1))+X(M(I,2))+X(M(I,3))+X(M(I,4))
 Variable:I -> .
 Variable:L(.) -> .
 Variable:I -> .
 NumericValue:1
 Variable:M(.,.) -> .
 Variable:X(.) -> .
 Variable:I -> .
 NumericValue:2
 Variable:M(.,.) -> .
 Variable:X(.) -> .
 BinaryOperatorPlus:+(.,.) -> .
 Variable:I -> .
 NumericValue:3
 Variable:M(.,.) -> .
 Variable:X(.) -> .
 BinaryOperatorPlus:+(.,.) -> .
 Variable:I -> .
 NumericValue:4
 Variable:M(.,.) -> .
 Variable:X(.) -> .
 BinaryOperatorPlus:+(.,.) -> .
 AssignmentOperator:= . -> .
415 LET L=L(I)
 Variable:L -> .
 Variable:I -> .
 Variable:L(.) -> .
 AssignmentOperator:= . -> .
420 IF L<10 THEN 455
 Variable:L -> .
 NumericValue:10
 BinaryOperatorLess:<(.,.) -> ?
 LineNumber:455
425 IF L>=11 THEN 455
 Variable:L -> .
 NumericValue:11
 BinaryOperatorGreaterEqual:>=(.,.) -> ?
 LineNumber:455
430 IF L>10 THEN 1600
 Variable:L -> .
 NumericValue:10
 BinaryOperatorGreater:>(.,.) -> ?
 LineNumber:1600
435 FOR J=1 TO 4
 WARNING: FOR/NEXT nesting exceeds limit 3
 control: Variable:J -> .
 start:   ["NumericValue:1"]
 end:     ["NumericValue:4"]
440 IF X(M(I,J))<>0 THEN 450
 Variable:I -> .
 Variable:J -> .
 Variable:M(.,.) -> .
 Variable:X(.) -> .
 NumericValue:0
 BinaryOperatorNotEqual:<>(.,.) -> ?
 LineNumber:450
445 LET X(M(I,J))=1/8
 Variable:I -> .
 Variable:J -> .
 Variable:M(.,.) -> .
 Variable:X(.) -> .
 NumericValue:1
 NumericValue:8
 BinaryOperatorDivide:/(.,.) -> =.
 AssignmentOperator:= =. -> .
450 NEXT J
 Variable:J -> .
455 NEXT I
 Variable:I -> .
470 GOSUB 1050
 LineNumber:1050
475 FOR I=1 TO 76
 WARNING: FORNEXT length exceeds limit 40
 control: Variable:I -> .
 start:   ["NumericValue:1"]
 end:     ["NumericValue:76"]
480 IF L(I)=.5 THEN 1700
 Variable:I -> .
 Variable:L(.) -> .
 NumericValue:.5
 BinaryOperatorEqual:=(.,.) -> ?
 LineNumber:1700
485 IF L(I)=5+3/8 THEN 1700
 Variable:I -> .
 Variable:L(.) -> .
 NumericValue:5
 NumericValue:3
 NumericValue:8
 BinaryOperatorDivide:/(.,.) -> =.
 BinaryOperatorPlus:+(.,.) -> =.
 BinaryOperatorEqual:=(.,.) -> ?
 LineNumber:1700
490 NEXT I
 Variable:I -> .
492 GOSUB 1800
 LineNumber:1800
493 GOTO 250
 LineNumber:250
500 PRINT " "
 TextValue:" "
 CarriageControl:NL
505 PRINT "DO YOU WANT TO TRY ANOTHER GAME";
 TextValue:"DO YOU WANT TO TRY ANOTHER GAME"
 CarriageControl:;
510 INPUT X$
 Variable:X$ -> $
515 IF X$="YES" THEN 35
 Variable:X$ -> $
 TextValue:"YES"
 BinaryOperatorEqual:=($,$) -> ?
 LineNumber:35
516 IF X$="NO" THEN 520
 Variable:X$ -> $
 TextValue:"NO"
 BinaryOperatorEqual:=($,$) -> ?
 LineNumber:520
517 PRINT "INCORRECT ANSWER. PLEASE TYPE 'YES' OR 'NO'";
 TextValue:"INCORRECT ANSWER. PLEASE TYPE 'YES' OR 'NO'"
 CarriageControl:;
518 GOTO 510
 LineNumber:510
520 STOP
 WARNING: Terminating statement in FOR/NEXT
 
1000 LET K1=INT((M-1)/16)+1
 Variable:K1 -> .
 Variable:M -> .
 NumericValue:1
 BinaryOperatorMinus:-(.,.) -> .
 NumericValue:16
 BinaryOperatorDivide:/(.,.) -> .
 FunctionInt:INT(.) -> .
 NumericValue:1
 BinaryOperatorPlus:+(.,.) -> .
 AssignmentOperator:= . -> .
1010 LET J2=M-16*(K1-1)
 Variable:J2 -> .
 Variable:M -> .
 NumericValue:16
 Variable:K1 -> .
 NumericValue:1
 BinaryOperatorMinus:-(.,.) -> .
 BinaryOperatorMultiply:*(.,.) -> .
 BinaryOperatorMinus:-(.,.) -> .
 AssignmentOperator:= . -> .
1030 LET K2=INT((J2-1)/4)+1
 Variable:K2 -> .
 Variable:J2 -> .
 NumericValue:1
 BinaryOperatorMinus:-(.,.) -> .
 NumericValue:4
 BinaryOperatorDivide:/(.,.) -> .
 FunctionInt:INT(.) -> .
 NumericValue:1
 BinaryOperatorPlus:+(.,.) -> .
 AssignmentOperator:= . -> .
1035 LET K3=M-(K1-1)*16-(K2-1)*4
 Variable:K3 -> .
 Variable:M -> .
 Variable:K1 -> .
 NumericValue:1
 BinaryOperatorMinus:-(.,.) -> .
 NumericValue:16
 BinaryOperatorMultiply:*(.,.) -> .
 BinaryOperatorMinus:-(.,.) -> .
 Variable:K2 -> .
 NumericValue:1
 BinaryOperatorMinus:-(.,.) -> .
 NumericValue:4
 BinaryOperatorMultiply:*(.,.) -> .
 BinaryOperatorMinus:-(.,.) -> .
 AssignmentOperator:= . -> .
1040 LET M=K1*100+K2*10+K3
 Variable:M -> .
 Variable:K1 -> .
 NumericValue:100
 BinaryOperatorMultiply:*(.,.) -> .
 Variable:K2 -> .
 NumericValue:10
 BinaryOperatorMultiply:*(.,.) -> .
 BinaryOperatorPlus:+(.,.) -> .
 Variable:K3 -> .
 BinaryOperatorPlus:+(.,.) -> .
 AssignmentOperator:= . -> .
1042 PRINT M;
 Variable:M -> .
 CarriageControl:;
1045 RETURN
 
1050 FOR S=1 TO 76
 control: Variable:S -> .
 start:   ["NumericValue:1"]
 end:     ["NumericValue:76"]
1060 LET J1 = M(S,1)
 Variable:J1 -> .
 Variable:S -> .
 NumericValue:1
 Variable:M(.,.) -> .
 AssignmentOperator:= . -> .
1070 LET J2=M(S,2)
 Variable:J2 -> .
 Variable:S -> .
 NumericValue:2
 Variable:M(.,.) -> .
 AssignmentOperator:= . -> .
1080 LET J3=M(S,3)
 Variable:J3 -> .
 Variable:S -> .
 NumericValue:3
 Variable:M(.,.) -> .
 AssignmentOperator:= . -> .
1090 LET J4=M(S,4)
 Variable:J4 -> .
 Variable:S -> .
 NumericValue:4
 Variable:M(.,.) -> .
 AssignmentOperator:= . -> .
1100 LET L(S)=X(J1)+X(J2)+X(J3)+X(J4)
 Variable:S -> .
 Variable:L(.) -> .
 Variable:J1 -> .
 Variable:X(.) -> .
 Variable:J2 -> .
 Variable:X(.) -> .
 BinaryOperatorPlus:+(.,.) -> .
 Variable:J3 -> .
 Variable:X(.) -> .
 BinaryOperatorPlus:+(.,.) -> .
 Variable:J4 -> .
 Variable:X(.) -> .
 BinaryOperatorPlus:+(.,.) -> .
 AssignmentOperator:= . -> .
1110 NEXT S
 Variable:S -> .
1120 RETURN
 
1200 FOR I=1 TO 64
 WARNING: FORNEXT length exceeds limit 40
 control: Variable:I -> .
 start:   ["NumericValue:1"]
 end:     ["NumericValue:64"]
1210 IF X(I)<>0 THEN 1250
 Variable:I -> .
 Variable:X(.) -> .
 NumericValue:0
 BinaryOperatorNotEqual:<>(.,.) -> ?
 LineNumber:1250
1220 LET X(I)=5
 Variable:I -> .
 Variable:X(.) -> .
 NumericValue:5
 AssignmentOperator:= =. -> .
1225 LET M=I
 Variable:M -> .
 Variable:I -> .
 AssignmentOperator:= . -> .
1226 PRINT "MACHINE LIKES";
 TextValue:"MACHINE LIKES"
 CarriageControl:;
1227 GOSUB 1000
 LineNumber:1000
1228 PRINT " "
 TextValue:" "
 CarriageControl:NL
1230 GOTO 70
 LineNumber:70
1250 NEXT I
 Variable:I -> .
1252 PRINT "THE GAME IS A DRAW"
 TextValue:"THE GAME IS A DRAW"
 CarriageControl:NL
1255 GOTO 500
 LineNumber:500
1300 FOR K=1 TO 18
 WARNING: FORNEXT length exceeds limit 40
 control: Variable:K -> .
 start:   ["NumericValue:1"]
 end:     ["NumericValue:18"]
1305 LET P=0
 Variable:P -> .
 NumericValue:0
 AssignmentOperator:= =. -> .
1310 FOR I=4*K-3 TO 4*K
 control: Variable:I -> .
 start:   ["NumericValue:4", "Variable:K -> .", "BinaryOperatorMultiply:*(.,.) -> .", "NumericValue:3", "BinaryOperatorMinus:-(.,.) -> ."]
 end:     ["NumericValue:4", "Variable:K -> .", "BinaryOperatorMultiply:*(.,.) -> ."]
1315 FOR J=1 TO 4
 control: Variable:J -> .
 start:   ["NumericValue:1"]
 end:     ["NumericValue:4"]
1320 LET P=P+X(M(I,J))
 Variable:P -> .
 Variable:P -> .
 Variable:I -> .
 Variable:J -> .
 Variable:M(.,.) -> .
 Variable:X(.) -> .
 BinaryOperatorPlus:+(.,.) -> .
 AssignmentOperator:= . -> .
1325 NEXT J
 Variable:J -> .
1330 NEXT I
 Variable:I -> .
1345 IF P<4 THEN 1390
 Variable:P -> .
 NumericValue:4
 BinaryOperatorLess:<(.,.) -> ?
 LineNumber:1390
1350 IF P<5 THEN 1400
 Variable:P -> .
 NumericValue:5
 BinaryOperatorLess:<(.,.) -> ?
 LineNumber:1400
1355 IF P<9 THEN 1390
 Variable:P -> .
 NumericValue:9
 BinaryOperatorLess:<(.,.) -> ?
 LineNumber:1390
1360 IF P<10 THEN 1400
 Variable:P -> .
 NumericValue:10
 BinaryOperatorLess:<(.,.) -> ?
 LineNumber:1400
1390 NEXT K
 Variable:K -> .
1395 GOSUB 1800
 LineNumber:1800
1396 GOTO 360
 LineNumber:360
1400 LET S=1/8
 Variable:S -> .
 NumericValue:1
 NumericValue:8
 BinaryOperatorDivide:/(.,.) -> =.
 AssignmentOperator:= =. -> .
1405 FOR I=4*K-3 TO 4*K
 WARNING: FORNEXT length exceeds limit 40
 control: Variable:I -> .
 start:   ["NumericValue:4", "Variable:K -> .", "BinaryOperatorMultiply:*(.,.) -> .", "NumericValue:3", "BinaryOperatorMinus:-(.,.) -> ."]
 end:     ["NumericValue:4", "Variable:K -> .", "BinaryOperatorMultiply:*(.,.) -> ."]
1410 GOTO 1703
 LineNumber:1703
1415 NEXT I
 Variable:I -> .
1420 LET S=0
 Variable:S -> .
 NumericValue:0
 AssignmentOperator:= =. -> .
1425 GOTO 1405
 LineNumber:1405
1500 DATA 1,49,52,4,13,61,64,16,22,39,23,38,26,42,27,43
 NumericValue:1
 NumericValue:49
 NumericValue:52
 NumericValue:4
 NumericValue:13
 NumericValue:61
 NumericValue:64
 NumericValue:16
 NumericValue:22
 NumericValue:39
 NumericValue:23
 NumericValue:38
 NumericValue:26
 NumericValue:42
 NumericValue:27
 NumericValue:43
1510DATA 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20
 WARNING: Line exceeds PRETTY width limit 72
 NumericValue:1
 NumericValue:2
 NumericValue:3
 NumericValue:4
 NumericValue:5
 NumericValue:6
 NumericValue:7
 NumericValue:8
 NumericValue:9
 NumericValue:10
 NumericValue:11
 NumericValue:12
 NumericValue:13
 NumericValue:14
 NumericValue:15
 NumericValue:16
 NumericValue:17
 NumericValue:18
 NumericValue:19
 NumericValue:20
1520 DATA 21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38
 WARNING: Line exceeds PRETTY width limit 72
 NumericValue:21
 NumericValue:22
 NumericValue:23
 NumericValue:24
 NumericValue:25
 NumericValue:26
 NumericValue:27
 NumericValue:28
 NumericValue:29
 NumericValue:30
 NumericValue:31
 NumericValue:32
 NumericValue:33
 NumericValue:34
 NumericValue:35
 NumericValue:36
 NumericValue:37
 NumericValue:38
1521 DATA 39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56
 WARNING: Line exceeds PRETTY width limit 72
 NumericValue:39
 NumericValue:40
 NumericValue:41
 NumericValue:42
 NumericValue:43
 NumericValue:44
 NumericValue:45
 NumericValue:46
 NumericValue:47
 NumericValue:48
 NumericValue:49
 NumericValue:50
 NumericValue:51
 NumericValue:52
 NumericValue:53
 NumericValue:54
 NumericValue:55
 NumericValue:56
1522 DATA 57,58,59,60,61,62,63,64
 NumericValue:57
 NumericValue:58
 NumericValue:59
 NumericValue:60
 NumericValue:61
 NumericValue:62
 NumericValue:63
 NumericValue:64
1523DATA1,17,33,49,5,21,37,53,9,25,41,57,13,29,45,61
 NumericValue:1
 NumericValue:17
 NumericValue:33
 NumericValue:49
 NumericValue:5
 NumericValue:21
 NumericValue:37
 NumericValue:53
 NumericValue:9
 NumericValue:25
 NumericValue:41
 NumericValue:57
 NumericValue:13
 NumericValue:29
 NumericValue:45
 NumericValue:61
1524 DATA 2,18,34,50,6,22,38,54,10,26,42,58,14,30,46,62
 NumericValue:2
 NumericValue:18
 NumericValue:34
 NumericValue:50
 NumericValue:6
 NumericValue:22
 NumericValue:38
 NumericValue:54
 NumericValue:10
 NumericValue:26
 NumericValue:42
 NumericValue:58
 NumericValue:14
 NumericValue:30
 NumericValue:46
 NumericValue:62
1525DATA 3,19,35,51,7,23,39,55,11,27,43,59,15,31,47,63
 NumericValue:3
 NumericValue:19
 NumericValue:35
 NumericValue:51
 NumericValue:7
 NumericValue:23
 NumericValue:39
 NumericValue:55
 NumericValue:11
 NumericValue:27
 NumericValue:43
 NumericValue:59
 NumericValue:15
 NumericValue:31
 NumericValue:47
 NumericValue:63
1527 DATA 4,20,36,52,8,24,40,56,12,28,44,60,16,32,48,64
 NumericValue:4
 NumericValue:20
 NumericValue:36
 NumericValue:52
 NumericValue:8
 NumericValue:24
 NumericValue:40
 NumericValue:56
 NumericValue:12
 NumericValue:28
 NumericValue:44
 NumericValue:60
 NumericValue:16
 NumericValue:32
 NumericValue:48
 NumericValue:64
1529 DATA 1,5,9,13,17,21,25,29,33,37,41,45,49,53,57,61
 NumericValue:1
 NumericValue:5
 NumericValue:9
 NumericValue:13
 NumericValue:17
 NumericValue:21
 NumericValue:25
 NumericValue:29
 NumericValue:33
 NumericValue:37
 NumericValue:41
 NumericValue:45
 NumericValue:49
 NumericValue:53
 NumericValue:57
 NumericValue:61
1532 DATA 2,6,10,14,18,22,26,30,34,38,42,46,50,54,58,62
 NumericValue:2
 NumericValue:6
 NumericValue:10
 NumericValue:14
 NumericValue:18
 NumericValue:22
 NumericValue:26
 NumericValue:30
 NumericValue:34
 NumericValue:38
 NumericValue:42
 NumericValue:46
 NumericValue:50
 NumericValue:54
 NumericValue:58
 NumericValue:62
1534 DATA 3,7,11,15,19,23,27,31,35,39,43,47,51,55,59,63
 NumericValue:3
 NumericValue:7
 NumericValue:11
 NumericValue:15
 NumericValue:19
 NumericValue:23
 NumericValue:27
 NumericValue:31
 NumericValue:35
 NumericValue:39
 NumericValue:43
 NumericValue:47
 NumericValue:51
 NumericValue:55
 NumericValue:59
 NumericValue:63
1536 DATA4,8,12,16,20,24,28,32,36,40,44,48,52,56,60,64
 NumericValue:4
 NumericValue:8
 NumericValue:12
 NumericValue:16
 NumericValue:20
 NumericValue:24
 NumericValue:28
 NumericValue:32
 NumericValue:36
 NumericValue:40
 NumericValue:44
 NumericValue:48
 NumericValue:52
 NumericValue:56
 NumericValue:60
 NumericValue:64
1538 DATA1,6,11,16,17,22,27,32,33,38,43,48,49,54,59,64
 NumericValue:1
 NumericValue:6
 NumericValue:11
 NumericValue:16
 NumericValue:17
 NumericValue:22
 NumericValue:27
 NumericValue:32
 NumericValue:33
 NumericValue:38
 NumericValue:43
 NumericValue:48
 NumericValue:49
 NumericValue:54
 NumericValue:59
 NumericValue:64
1540 DATA 13,10,7,4,29,26,23,20,45,42,39,36,61,58,55,52
 NumericValue:13
 NumericValue:10
 NumericValue:7
 NumericValue:4
 NumericValue:29
 NumericValue:26
 NumericValue:23
 NumericValue:20
 NumericValue:45
 NumericValue:42
 NumericValue:39
 NumericValue:36
 NumericValue:61
 NumericValue:58
 NumericValue:55
 NumericValue:52
1542 DATA1,21,41,61,2,22,42,62,3,23,43,63,4,24,44,64
 NumericValue:1
 NumericValue:21
 NumericValue:41
 NumericValue:61
 NumericValue:2
 NumericValue:22
 NumericValue:42
 NumericValue:62
 NumericValue:3
 NumericValue:23
 NumericValue:43
 NumericValue:63
 NumericValue:4
 NumericValue:24
 NumericValue:44
 NumericValue:64
1544DATA 49,37,25,13,50,38,26,14,51,39,27,15,52,40,28,16
 NumericValue:49
 NumericValue:37
 NumericValue:25
 NumericValue:13
 NumericValue:50
 NumericValue:38
 NumericValue:26
 NumericValue:14
 NumericValue:51
 NumericValue:39
 NumericValue:27
 NumericValue:15
 NumericValue:52
 NumericValue:40
 NumericValue:28
 NumericValue:16
1546DATA 1,18,35,52,5,22,39,56,9,26,43,60,13,30,47,64
 NumericValue:1
 NumericValue:18
 NumericValue:35
 NumericValue:52
 NumericValue:5
 NumericValue:22
 NumericValue:39
 NumericValue:56
 NumericValue:9
 NumericValue:26
 NumericValue:43
 NumericValue:60
 NumericValue:13
 NumericValue:30
 NumericValue:47
 NumericValue:64
1548DATA 49,34,19,4,53,38,23,8,57,42,27,12,61,46,31,16
 NumericValue:49
 NumericValue:34
 NumericValue:19
 NumericValue:4
 NumericValue:53
 NumericValue:38
 NumericValue:23
 NumericValue:8
 NumericValue:57
 NumericValue:42
 NumericValue:27
 NumericValue:12
 NumericValue:61
 NumericValue:46
 NumericValue:31
 NumericValue:16
1550DATA 1,22,43,64,16,27,38,49,4,23,42,61,13,26,39,52
 NumericValue:1
 NumericValue:22
 NumericValue:43
 NumericValue:64
 NumericValue:16
 NumericValue:27
 NumericValue:38
 NumericValue:49
 NumericValue:4
 NumericValue:23
 NumericValue:42
 NumericValue:61
 NumericValue:13
 NumericValue:26
 NumericValue:39
 NumericValue:52
1600 FOR J=1 TO 4
 WARNING: FORNEXT length exceeds limit 40
 WARNING: FOR/NEXT nesting exceeds limit 3
 control: Variable:J -> .
 start:   ["NumericValue:1"]
 end:     ["NumericValue:4"]
1605 IF X(M(I,J))<>1/8 THEN 1650
 Variable:I -> .
 Variable:J -> .
 Variable:M(.,.) -> .
 Variable:X(.) -> .
 NumericValue:1
 NumericValue:8
 BinaryOperatorDivide:/(.,.) -> =.
 BinaryOperatorNotEqual:<>(.,.) -> ?
 LineNumber:1650
1610 LET X(M(I,J))=5
 Variable:I -> .
 Variable:J -> .
 Variable:M(.,.) -> .
 Variable:X(.) -> .
 NumericValue:5
 AssignmentOperator:= =. -> .
1615 IF L(I)<5 THEN 1625
 Variable:I -> .
 Variable:L(.) -> .
 NumericValue:5
 BinaryOperatorLess:<(.,.) -> ?
 LineNumber:1625
1620 PRINT "LET'S SEE YOU GET OUT OF THIS! MACHINE MOVES TO";
 TextValue:"LET'S SEE YOU GET OUT OF THIS! MACHINE MOVES TO"
 CarriageControl:;
1622 GOTO 1626
 LineNumber:1626
1625 PRINT "YOU FOX. JUST IN THE NICK OF TIME, MACHINE MOVES TO";
 TextValue:"YOU FOX. JUST IN THE NICK OF TIME, MACHINE MOVES TO"
 CarriageControl:;
1626 LET M=M(I,J)
 Variable:M -> .
 Variable:I -> .
 Variable:J -> .
 Variable:M(.,.) -> .
 AssignmentOperator:= . -> .
1630 GOSUB 1000
 LineNumber:1000
1640 GOTO 70
 LineNumber:70
1650 NEXT J
 Variable:J -> .
1660 PRINT "MACHINE CONCEDES THIS GAME."
 TextValue:"MACHINE CONCEDES THIS GAME."
 CarriageControl:NL
1665 GOTO 500
 LineNumber:500
1700 LET S=1/8
 Variable:S -> .
 NumericValue:1
 NumericValue:8
 BinaryOperatorDivide:/(.,.) -> =.
 AssignmentOperator:= =. -> .
1703 IF I-INT(I/4)*4>1 THEN 1715
 Variable:I -> .
 Variable:I -> .
 NumericValue:4
 BinaryOperatorDivide:/(.,.) -> .
 FunctionInt:INT(.) -> .
 NumericValue:4
 BinaryOperatorMultiply:*(.,.) -> .
 BinaryOperatorMinus:-(.,.) -> .
 NumericValue:1
 BinaryOperatorGreater:>(.,.) -> ?
 LineNumber:1715
1705 LET A=1
 Variable:A -> .
 NumericValue:1
 AssignmentOperator:= =. -> .
1710 GOTO 1720
 LineNumber:1720
1715 LET A=2
 Variable:A -> .
 NumericValue:2
 AssignmentOperator:= =. -> .
1720 FOR J=A TO 5-A _ STEP 5-2*A
 WARNING: FORNEXT length exceeds limit 40
 WARNING: FOR/NEXT nesting exceeds limit 3
 control: Variable:J -> .
 start:   ["Variable:A -> ."]
 end:     ["NumericValue:5", "Variable:A -> .", "BinaryOperatorMinus:-(.,.) -> ."]
 step:    ["NumericValue:5", "NumericValue:2", "Variable:A -> .", "BinaryOperatorMultiply:*(.,.) -> .", "BinaryOperatorMinus:-(.,.) -> ."]
1725 IF X(M(I,J))=S THEN 1750
 Variable:I -> .
 Variable:J -> .
 Variable:M(.,.) -> .
 Variable:X(.) -> .
 Variable:S -> .
 BinaryOperatorEqual:=(.,.) -> ?
 LineNumber:1750
1730 NEXT J
 Variable:J -> .
1735 GOTO 1415
 LineNumber:1415
1750 LET X(M(I,J))=5
 Variable:I -> .
 Variable:J -> .
 Variable:M(.,.) -> .
 Variable:X(.) -> .
 NumericValue:5
 AssignmentOperator:= =. -> .
1755 LET M=M(I,J)
 Variable:M -> .
 Variable:I -> .
 Variable:J -> .
 Variable:M(.,.) -> .
 AssignmentOperator:= . -> .
1760 PRINT "MACHINE TAKES";
 TextValue:"MACHINE TAKES"
 CarriageControl:;
1770 GOSUB 1000
 LineNumber:1000
1780 GOTO 70
 LineNumber:70
1800 FOR I=1 TO 64
 control: Variable:I -> .
 start:   ["NumericValue:1"]
 end:     ["NumericValue:64"]
1810 IF X(I)<>1/8 THEN 1850
 Variable:I -> .
 Variable:X(.) -> .
 NumericValue:1
 NumericValue:8
 BinaryOperatorDivide:/(.,.) -> =.
 BinaryOperatorNotEqual:<>(.,.) -> ?
 LineNumber:1850
1815 LET X(I)=0
 Variable:I -> .
 Variable:X(.) -> .
 NumericValue:0
 AssignmentOperator:= =. -> .
1850 NEXT I
 Variable:I -> .
1860 RETURN
 
2000 END
 

