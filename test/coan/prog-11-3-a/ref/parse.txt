10 PRINT
 CarriageControl:NL
20 PRINT
 CarriageControl:NL
23 READ N
 Variable:N -> _
25 FOR S=N TO 1 STEP -1
 control: Variable:S -> _
 start:   ["Variable:N -> _"]
 end:     ["NumericConstant:1"]
 step:    ["NumericConstant:1", "UnaryOperatorMinus:-(_) -> =_"]
30 READ P[S]
 Variable:S -> _
 Variable:P(_) -> _
40 PRINT P[S];
 Variable:S -> _
 Variable:P(_) -> _
 CarriageControl:;
50 NEXT S
 Variable:S -> _
55 PRINT
 CarriageControl:NL
60 PRINT "INTEGRAL ZERO(S):  ";
 TextConstant:"INTEGRAL ZERO(S):  "
 CarriageControl:;
68 REM TURN SWITCH OFF
 Remark:TURN SWITCH OFF
70 LET K=0
 Variable:K -> _
 NumericConstant:0
 AssignmentOperator:= =_ -> _
78 REM STUDY LINE 80 CAREFULLY!
 Remark:STUDY LINE 80 CAREFULLY!
80 FOR X=-P[1] TO P[1] STEP SGN(P[1])
 control: Variable:X -> _
 start:   ["NumericConstant:1", "Variable:P(_) -> _", "UnaryOperatorMinus:-(_) -> _"]
 end:     ["NumericConstant:1", "Variable:P(_) -> _"]
 step:    ["NumericConstant:1", "Variable:P(_) -> _", "FunctionSgn:SGN(_) -> _"]
88 REM LINE 90 PREVENTS AN ERROR MESSAGE CAUSED BY
 Remark:LINE 90 PREVENTS AN ERROR MESSAGE CAUSED BY
89 REM DIVIDING BY ZERO
 Remark:DIVIDING BY ZERO
90 IF X=0 THEN 140
 Variable:X -> _
 NumericConstant:0
 BinaryOperatorEqual:=(_,_) -> ?
 LineNumber:140
98 REM IS X A FACTOR OF P[1]?
 Remark:IS X A FACTOR OF P[1]?
100 IF P[1]/X <> INT(P[1]/X) THEN 140
 NumericConstant:1
 Variable:P(_) -> _
 Variable:X -> _
 BinaryOperatorDivide:/(_,_) -> _
 NumericConstant:1
 Variable:P(_) -> _
 Variable:X -> _
 BinaryOperatorDivide:/(_,_) -> _
 FunctionInt:INT(_) -> _
 BinaryOperatorNotEqual:<>(_,_) -> ?
 LineNumber:140
105 GOSUB 500
 LineNumber:500
108 REM IS THE REMAINDER ZERO?
 Remark:IS THE REMAINDER ZERO?
110 IF P <> 0 THEN 140
 Variable:P -> _
 NumericConstant:0
 BinaryOperatorNotEqual:<>(_,_) -> ?
 LineNumber:140
118 REM IF THE COMPUTER GETS THROUGH HERE, THE
 Remark:IF THE COMPUTER GETS THROUGH HERE, THE
119 REM VALUE OF X IS A ZERO OF THE FUNCTION
 Remark:VALUE OF X IS A ZERO OF THE FUNCTION
120 PRINT X;
 Variable:X -> _
 CarriageControl:;
128 REM TURN THE SWITCH ON - WE HAVE A ZERO
 Remark:TURN THE SWITCH ON - WE HAVE A ZERO
130 LET K=1
 Variable:K -> _
 NumericConstant:1
 AssignmentOperator:= =_ -> _
140 NEXT X
 Variable:X -> _
150 IF K=1 THEN 20
 Variable:K -> _
 NumericConstant:1
 BinaryOperatorEqual:=(_,_) -> ?
 LineNumber:20
160 PRINT "NONE FOUND";
 TextConstant:"NONE FOUND"
 CarriageControl:;
165 GOTO 20
 LineNumber:20
170 DATA 4,1,-2,-11,12
 NumericConstant:4
 NumericConstant:1
 NumericConstant:2
 UnaryOperatorMinus:-(_) -> =_
 NumericConstant:11
 UnaryOperatorMinus:-(_) -> =_
 NumericConstant:12
180 DATA 4,1,1,-5,-2
 NumericConstant:4
 NumericConstant:1
 NumericConstant:1
 NumericConstant:5
 UnaryOperatorMinus:-(_) -> =_
 NumericConstant:2
 UnaryOperatorMinus:-(_) -> =_
190 DATA 4,1,-2,3,-4
 NumericConstant:4
 NumericConstant:1
 NumericConstant:2
 UnaryOperatorMinus:-(_) -> =_
 NumericConstant:3
 NumericConstant:4
 UnaryOperatorMinus:-(_) -> =_
200 DATA 5,2,-1,-11,11,-2
 NumericConstant:5
 NumericConstant:2
 NumericConstant:1
 UnaryOperatorMinus:-(_) -> =_
 NumericConstant:11
 UnaryOperatorMinus:-(_) -> =_
 NumericConstant:11
 NumericConstant:2
 UnaryOperatorMinus:-(_) -> =_
210 DATA 7,2,-5,-6,9,9,-39,36
 NumericConstant:7
 NumericConstant:2
 NumericConstant:5
 UnaryOperatorMinus:-(_) -> =_
 NumericConstant:6
 UnaryOperatorMinus:-(_) -> =_
 NumericConstant:9
 NumericConstant:9
 NumericConstant:39
 UnaryOperatorMinus:-(_) -> =_
 NumericConstant:36
490 REM SUBROUTINE 500 THROUGH 540 TAKES THE PLACE OF A
 Remark:SUBROUTINE 500 THROUGH 540 TAKES THE PLACE OF A
491 REM DEF STATEMENT AND EVALUATES A POLYNOMIAL OF
 Remark:DEF STATEMENT AND EVALUATES A POLYNOMIAL OF
492 REM OF DEGREE N-1.
 Remark:OF DEGREE N-1.
500 LET P=0
 Variable:P -> _
 NumericConstant:0
 AssignmentOperator:= =_ -> _
510 FOR I=N TO 1 STEP -1
 control: Variable:I -> _
 start:   ["Variable:N -> _"]
 end:     ["NumericConstant:1"]
 step:    ["NumericConstant:1", "UnaryOperatorMinus:-(_) -> =_"]
520 LET P=P+P[I]*X^(I-1)
 Variable:P -> _
 Variable:P -> _
 Variable:I -> _
 Variable:P(_) -> _
 Variable:X -> _
 Variable:I -> _
 NumericConstant:1
 BinaryOperatorMinus:-(_,_) -> _
 BinaryOperatorPower:^(_,_) -> _
 BinaryOperatorMultiply:*(_,_) -> _
 BinaryOperatorPlus:+(_,_) -> _
 AssignmentOperator:= _ -> _
530 NEXT I
 Variable:I -> _
540 RETURN
 
999 END
 

