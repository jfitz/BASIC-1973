500: DATA 4, 6, 103, 201, 90
510: DATA 5, 1, 3, 4, -8, 2
520: DATA 6, -4, -3, 5, -2, 1, -3
600: DATA 0
5: DIM P[10, 10]
10: READ N
 N = 4
15: IF N = 0 THEN 999
 N: 4
 N = 0: false
20: FOR X = N TO 1 STEP -1
 N: 4
 X = 4
 N = 4
 -1 = -1
 terminated:false
30: READ P[1, X]
 X: 4
 P(1,4) = 6
40: PRINT P[1, X];
 X: 4
 P(1,4): 6
 6 
50: LET P[2, X] = P[1, X]
 X: 4
 P(1,4): 6
 P(2,4) = 6
60: IF (X + 1) / 2 = INT((X + 1) / 2) THEN 80
 X: 4
 (X + 1) / 2 = INT((X + 1) / 2): false
70: LET P[2, X] = -P[2, X]
 X: 4
 P(2,4): 6
 P(2,4) = -6
80: NEXT X
 X: 4
 terminated:false
 X = 3
30: READ P[1, X]
 X: 3
 P(1,3) = 103
40: PRINT P[1, X];
 X: 3
 P(1,3): 103
 103 
50: LET P[2, X] = P[1, X]
 X: 3
 P(1,3): 103
 P(2,3) = 103
60: IF (X + 1) / 2 = INT((X + 1) / 2) THEN 80
 X: 3
 (X + 1) / 2 = INT((X + 1) / 2): true
80: NEXT X
 X: 3
 terminated:false
 X = 2
30: READ P[1, X]
 X: 2
 P(1,2) = 201
40: PRINT P[1, X];
 X: 2
 P(1,2): 201
 201 
50: LET P[2, X] = P[1, X]
 X: 2
 P(1,2): 201
 P(2,2) = 201
60: IF (X + 1) / 2 = INT((X + 1) / 2) THEN 80
 X: 2
 (X + 1) / 2 = INT((X + 1) / 2): false
70: LET P[2, X] = -P[2, X]
 X: 2
 P(2,2): 201
 P(2,2) = -201
80: NEXT X
 X: 2
 terminated:false
 X = 1
30: READ P[1, X]
 X: 1
 P(1,1) = 90
40: PRINT P[1, X];
 X: 1
 P(1,1): 90
 90 
50: LET P[2, X] = P[1, X]
 X: 1
 P(1,1): 90
 P(2,1) = 90
60: IF (X + 1) / 2 = INT((X + 1) / 2) THEN 80
 X: 1
 (X + 1) / 2 = INT((X + 1) / 2): true
80: NEXT X
 X: 1
 terminated:true
90: PRINT

100: PRINT N - 1; "COMPLEX ZEROS"
 N: 4
 3 COMPLEX ZEROS
200: LET V1, V2 = 0
 V1 = 0
 V2 = 0
210: FOR X = N - 1 TO 1 STEP -1
 N: 4
 X = 3
 N - 1 = 3
 -1 = -1
 terminated:false
218: REM LOOK AT POSITIVE ZEROS
220: IF P[1, X] * P[1, X + 1] > 0 THEN 240
 X: 3
 P(1,3): 103
 P(1,4): 6
 P[1, X] * P[1, X + 1] > 0: true
240: IF P[2, X] * P[2, X + 1] > 0 THEN 260
 X: 3
 P(2,3): 103
 P(2,4): -6
 P[2, X] * P[2, X + 1] > 0: false
250: LET V2 = V2 + 1
 V2: 0
 V2 = 1
260: NEXT X
 X: 3
 terminated:false
 X = 2
218: REM LOOK AT POSITIVE ZEROS
220: IF P[1, X] * P[1, X + 1] > 0 THEN 240
 X: 2
 P(1,2): 201
 P(1,3): 103
 P[1, X] * P[1, X + 1] > 0: true
240: IF P[2, X] * P[2, X + 1] > 0 THEN 260
 X: 2
 P(2,2): -201
 P(2,3): 103
 P[2, X] * P[2, X + 1] > 0: false
250: LET V2 = V2 + 1
 V2: 1
 V2 = 2
260: NEXT X
 X: 2
 terminated:false
 X = 1
218: REM LOOK AT POSITIVE ZEROS
220: IF P[1, X] * P[1, X + 1] > 0 THEN 240
 X: 1
 P(1,1): 90
 P(1,2): 201
 P[1, X] * P[1, X + 1] > 0: true
240: IF P[2, X] * P[2, X + 1] > 0 THEN 260
 X: 1
 P(2,1): 90
 P(2,2): -201
 P[2, X] * P[2, X + 1] > 0: false
250: LET V2 = V2 + 1
 V2: 2
 V2 = 3
260: NEXT X
 X: 1
 terminated:true
300: PRINT V1; "MAX POSITIVE"
 V1: 0
 0 MAX POSITIVE
310: PRINT V2; "MAX NEGATIVE"
 V2: 3
 3 MAX NEGATIVE
320: PRINT

340: GOTO 10
10: READ N
 N = 5
15: IF N = 0 THEN 999
 N: 5
 N = 0: false
20: FOR X = N TO 1 STEP -1
 N: 5
 X = 5
 N = 5
 -1 = -1
 terminated:false
30: READ P[1, X]
 X: 5
 P(1,5) = 1
40: PRINT P[1, X];
 X: 5
 P(1,5): 1
 1 
50: LET P[2, X] = P[1, X]
 X: 5
 P(1,5): 1
 P(2,5) = 1
60: IF (X + 1) / 2 = INT((X + 1) / 2) THEN 80
 X: 5
 (X + 1) / 2 = INT((X + 1) / 2): true
80: NEXT X
 X: 5
 terminated:false
 X = 4
30: READ P[1, X]
 X: 4
 P(1,4) = 3
40: PRINT P[1, X];
 X: 4
 P(1,4): 3
 3 
50: LET P[2, X] = P[1, X]
 X: 4
 P(1,4): 3
 P(2,4) = 3
60: IF (X + 1) / 2 = INT((X + 1) / 2) THEN 80
 X: 4
 (X + 1) / 2 = INT((X + 1) / 2): false
70: LET P[2, X] = -P[2, X]
 X: 4
 P(2,4): 3
 P(2,4) = -3
80: NEXT X
 X: 4
 terminated:false
 X = 3
30: READ P[1, X]
 X: 3
 P(1,3) = 4
40: PRINT P[1, X];
 X: 3
 P(1,3): 4
 4 
50: LET P[2, X] = P[1, X]
 X: 3
 P(1,3): 4
 P(2,3) = 4
60: IF (X + 1) / 2 = INT((X + 1) / 2) THEN 80
 X: 3
 (X + 1) / 2 = INT((X + 1) / 2): true
80: NEXT X
 X: 3
 terminated:false
 X = 2
30: READ P[1, X]
 X: 2
 P(1,2) = -8
40: PRINT P[1, X];
 X: 2
 P(1,2): -8
-8 
50: LET P[2, X] = P[1, X]
 X: 2
 P(1,2): -8
 P(2,2) = -8
60: IF (X + 1) / 2 = INT((X + 1) / 2) THEN 80
 X: 2
 (X + 1) / 2 = INT((X + 1) / 2): false
70: LET P[2, X] = -P[2, X]
 X: 2
 P(2,2): -8
 P(2,2) = 8
80: NEXT X
 X: 2
 terminated:false
 X = 1
30: READ P[1, X]
 X: 1
 P(1,1) = 2
40: PRINT P[1, X];
 X: 1
 P(1,1): 2
 2 
50: LET P[2, X] = P[1, X]
 X: 1
 P(1,1): 2
 P(2,1) = 2
60: IF (X + 1) / 2 = INT((X + 1) / 2) THEN 80
 X: 1
 (X + 1) / 2 = INT((X + 1) / 2): true
80: NEXT X
 X: 1
 terminated:true
90: PRINT

100: PRINT N - 1; "COMPLEX ZEROS"
 N: 5
 4 COMPLEX ZEROS
200: LET V1, V2 = 0
 V1 = 0
 V2 = 0
210: FOR X = N - 1 TO 1 STEP -1
 N: 5
 X = 4
 N - 1 = 4
 -1 = -1
 terminated:false
218: REM LOOK AT POSITIVE ZEROS
220: IF P[1, X] * P[1, X + 1] > 0 THEN 240
 X: 4
 P(1,4): 3
 P(1,5): 1
 P[1, X] * P[1, X + 1] > 0: true
240: IF P[2, X] * P[2, X + 1] > 0 THEN 260
 X: 4
 P(2,4): -3
 P(2,5): 1
 P[2, X] * P[2, X + 1] > 0: false
250: LET V2 = V2 + 1
 V2: 0
 V2 = 1
260: NEXT X
 X: 4
 terminated:false
 X = 3
218: REM LOOK AT POSITIVE ZEROS
220: IF P[1, X] * P[1, X + 1] > 0 THEN 240
 X: 3
 P(1,3): 4
 P(1,4): 3
 P[1, X] * P[1, X + 1] > 0: true
240: IF P[2, X] * P[2, X + 1] > 0 THEN 260
 X: 3
 P(2,3): 4
 P(2,4): -3
 P[2, X] * P[2, X + 1] > 0: false
250: LET V2 = V2 + 1
 V2: 1
 V2 = 2
260: NEXT X
 X: 3
 terminated:false
 X = 2
218: REM LOOK AT POSITIVE ZEROS
220: IF P[1, X] * P[1, X + 1] > 0 THEN 240
 X: 2
 P(1,2): -8
 P(1,3): 4
 P[1, X] * P[1, X + 1] > 0: false
230: LET V1 = V1 + 1
 V1: 0
 V1 = 1
240: IF P[2, X] * P[2, X + 1] > 0 THEN 260
 X: 2
 P(2,2): 8
 P(2,3): 4
 P[2, X] * P[2, X + 1] > 0: true
260: NEXT X
 X: 2
 terminated:false
 X = 1
218: REM LOOK AT POSITIVE ZEROS
220: IF P[1, X] * P[1, X + 1] > 0 THEN 240
 X: 1
 P(1,1): 2
 P(1,2): -8
 P[1, X] * P[1, X + 1] > 0: false
230: LET V1 = V1 + 1
 V1: 1
 V1 = 2
240: IF P[2, X] * P[2, X + 1] > 0 THEN 260
 X: 1
 P(2,1): 2
 P(2,2): 8
 P[2, X] * P[2, X + 1] > 0: true
260: NEXT X
 X: 1
 terminated:true
300: PRINT V1; "MAX POSITIVE"
 V1: 2
 2 MAX POSITIVE
310: PRINT V2; "MAX NEGATIVE"
 V2: 2
 2 MAX NEGATIVE
320: PRINT

340: GOTO 10
10: READ N
 N = 6
15: IF N = 0 THEN 999
 N: 6
 N = 0: false
20: FOR X = N TO 1 STEP -1
 N: 6
 X = 6
 N = 6
 -1 = -1
 terminated:false
30: READ P[1, X]
 X: 6
 P(1,6) = -4
40: PRINT P[1, X];
 X: 6
 P(1,6): -4
-4 
50: LET P[2, X] = P[1, X]
 X: 6
 P(1,6): -4
 P(2,6) = -4
60: IF (X + 1) / 2 = INT((X + 1) / 2) THEN 80
 X: 6
 (X + 1) / 2 = INT((X + 1) / 2): false
70: LET P[2, X] = -P[2, X]
 X: 6
 P(2,6): -4
 P(2,6) = 4
80: NEXT X
 X: 6
 terminated:false
 X = 5
30: READ P[1, X]
 X: 5
 P(1,5) = -3
40: PRINT P[1, X];
 X: 5
 P(1,5): -3
-3 
50: LET P[2, X] = P[1, X]
 X: 5
 P(1,5): -3
 P(2,5) = -3
60: IF (X + 1) / 2 = INT((X + 1) / 2) THEN 80
 X: 5
 (X + 1) / 2 = INT((X + 1) / 2): true
80: NEXT X
 X: 5
 terminated:false
 X = 4
30: READ P[1, X]
 X: 4
 P(1,4) = 5
40: PRINT P[1, X];
 X: 4
 P(1,4): 5
 5 
50: LET P[2, X] = P[1, X]
 X: 4
 P(1,4): 5
 P(2,4) = 5
60: IF (X + 1) / 2 = INT((X + 1) / 2) THEN 80
 X: 4
 (X + 1) / 2 = INT((X + 1) / 2): false
70: LET P[2, X] = -P[2, X]
 X: 4
 P(2,4): 5
 P(2,4) = -5
80: NEXT X
 X: 4
 terminated:false
 X = 3
30: READ P[1, X]
 X: 3
 P(1,3) = -2
40: PRINT P[1, X];
 X: 3
 P(1,3): -2
-2 
50: LET P[2, X] = P[1, X]
 X: 3
 P(1,3): -2
 P(2,3) = -2
60: IF (X + 1) / 2 = INT((X + 1) / 2) THEN 80
 X: 3
 (X + 1) / 2 = INT((X + 1) / 2): true
80: NEXT X
 X: 3
 terminated:false
 X = 2
30: READ P[1, X]
 X: 2
 P(1,2) = 1
40: PRINT P[1, X];
 X: 2
 P(1,2): 1
 1 
50: LET P[2, X] = P[1, X]
 X: 2
 P(1,2): 1
 P(2,2) = 1
60: IF (X + 1) / 2 = INT((X + 1) / 2) THEN 80
 X: 2
 (X + 1) / 2 = INT((X + 1) / 2): false
70: LET P[2, X] = -P[2, X]
 X: 2
 P(2,2): 1
 P(2,2) = -1
80: NEXT X
 X: 2
 terminated:false
 X = 1
30: READ P[1, X]
 X: 1
 P(1,1) = -3
40: PRINT P[1, X];
 X: 1
 P(1,1): -3
-3 
50: LET P[2, X] = P[1, X]
 X: 1
 P(1,1): -3
 P(2,1) = -3
60: IF (X + 1) / 2 = INT((X + 1) / 2) THEN 80
 X: 1
 (X + 1) / 2 = INT((X + 1) / 2): true
80: NEXT X
 X: 1
 terminated:true
90: PRINT

100: PRINT N - 1; "COMPLEX ZEROS"
 N: 6
 5 COMPLEX ZEROS
200: LET V1, V2 = 0
 V1 = 0
 V2 = 0
210: FOR X = N - 1 TO 1 STEP -1
 N: 6
 X = 5
 N - 1 = 5
 -1 = -1
 terminated:false
218: REM LOOK AT POSITIVE ZEROS
220: IF P[1, X] * P[1, X + 1] > 0 THEN 240
 X: 5
 P(1,5): -3
 P(1,6): -4
 P[1, X] * P[1, X + 1] > 0: true
240: IF P[2, X] * P[2, X + 1] > 0 THEN 260
 X: 5
 P(2,5): -3
 P(2,6): 4
 P[2, X] * P[2, X + 1] > 0: false
250: LET V2 = V2 + 1
 V2: 0
 V2 = 1
260: NEXT X
 X: 5
 terminated:false
 X = 4
218: REM LOOK AT POSITIVE ZEROS
220: IF P[1, X] * P[1, X + 1] > 0 THEN 240
 X: 4
 P(1,4): 5
 P(1,5): -3
 P[1, X] * P[1, X + 1] > 0: false
230: LET V1 = V1 + 1
 V1: 0
 V1 = 1
240: IF P[2, X] * P[2, X + 1] > 0 THEN 260
 X: 4
 P(2,4): -5
 P(2,5): -3
 P[2, X] * P[2, X + 1] > 0: true
260: NEXT X
 X: 4
 terminated:false
 X = 3
218: REM LOOK AT POSITIVE ZEROS
220: IF P[1, X] * P[1, X + 1] > 0 THEN 240
 X: 3
 P(1,3): -2
 P(1,4): 5
 P[1, X] * P[1, X + 1] > 0: false
230: LET V1 = V1 + 1
 V1: 1
 V1 = 2
240: IF P[2, X] * P[2, X + 1] > 0 THEN 260
 X: 3
 P(2,3): -2
 P(2,4): -5
 P[2, X] * P[2, X + 1] > 0: true
260: NEXT X
 X: 3
 terminated:false
 X = 2
218: REM LOOK AT POSITIVE ZEROS
220: IF P[1, X] * P[1, X + 1] > 0 THEN 240
 X: 2
 P(1,2): 1
 P(1,3): -2
 P[1, X] * P[1, X + 1] > 0: false
230: LET V1 = V1 + 1
 V1: 2
 V1 = 3
240: IF P[2, X] * P[2, X + 1] > 0 THEN 260
 X: 2
 P(2,2): -1
 P(2,3): -2
 P[2, X] * P[2, X + 1] > 0: true
260: NEXT X
 X: 2
 terminated:false
 X = 1
218: REM LOOK AT POSITIVE ZEROS
220: IF P[1, X] * P[1, X + 1] > 0 THEN 240
 X: 1
 P(1,1): -3
 P(1,2): 1
 P[1, X] * P[1, X + 1] > 0: false
230: LET V1 = V1 + 1
 V1: 3
 V1 = 4
240: IF P[2, X] * P[2, X + 1] > 0 THEN 260
 X: 1
 P(2,1): -3
 P(2,2): -1
 P[2, X] * P[2, X + 1] > 0: true
260: NEXT X
 X: 1
 terminated:true
300: PRINT V1; "MAX POSITIVE"
 V1: 4
 4 MAX POSITIVE
310: PRINT V2; "MAX NEGATIVE"
 V2: 1
 1 MAX NEGATIVE
320: PRINT

340: GOTO 10
10: READ N
 N = 0
15: IF N = 0 THEN 999
 N: 0
 N = 0: true
999: END
STOP in line 999

