5 DIM P[10,10]
 NumericValue:10
 NumericValue:10
 Declaration:P(,) -> .(,)
10 READ N
 Variable:N -> .
15 IF N=0 THEN 999
 Variable:N -> .
 NumericValue:0
 BinaryOperatorEqual:=(.,.) -> ?
 LineNumber:999
20 FOR X=N TO 1 STEP -1
 control: Variable:X -> .
 start:   ["Variable:N -> ."]
 end:     ["NumericValue:1"]
 step:    ["NumericValue:1", "UnaryOperatorMinus:-(.) -> =."]
30 READ P[1,X]
 NumericValue:1
 Variable:X -> .
 Variable:P(.,.) -> .
40 PRINT P[1,X];
 NumericValue:1
 Variable:X -> .
 Variable:P(.,.) -> .
 CarriageControl:;
48 REM ENTER THE SAME COEFFICIENT IN THE SAME COLUMN
 Remark:ENTER THE SAME COEFFICIENT IN THE SAME COLUMN
49 REM OF THE SECOND ROW
 Remark:OF THE SECOND ROW
50 LET P[2,X]=P[1,X]
 NumericValue:2
 Variable:X -> .
 Variable:P(.,.) -> .
 NumericValue:1
 Variable:X -> .
 Variable:P(.,.) -> .
 AssignmentOperator:= . -> .
58 REM IF THE EXPONENT ON X IS ODD THEN CHANGE THE SIGN
 Remark:IF THE EXPONENT ON X IS ODD THEN CHANGE THE SIGN
60 IF (X+1)/2=INT((X+1)/2) THEN 80
 Variable:X -> .
 NumericValue:1
 BinaryOperatorPlus:+(.,.) -> .
 NumericValue:2
 BinaryOperatorDivide:/(.,.) -> .
 Variable:X -> .
 NumericValue:1
 BinaryOperatorPlus:+(.,.) -> .
 NumericValue:2
 BinaryOperatorDivide:/(.,.) -> .
 FunctionInt:INT(.) -> .
 BinaryOperatorEqual:=(.,.) -> ?
 LineNumber:80
70 LET P[2,X]=-P[2,X]
 NumericValue:2
 Variable:X -> .
 Variable:P(.,.) -> .
 NumericValue:2
 Variable:X -> .
 Variable:P(.,.) -> .
 UnaryOperatorMinus:-(.) -> .
 AssignmentOperator:= . -> .
80 NEXT X
 Variable:X -> .
90 PRINT
 CarriageControl:NL
100 PRINT N-1;"COMPLEX ZEROS"
 Variable:N -> .
 NumericValue:1
 BinaryOperatorMinus:-(.,.) -> .
 CarriageControl:;
 TextValue:"COMPLEX ZEROS"
 CarriageControl:NL
200 LET V1,V2=0
 Variable:V1 -> .
 Variable:V2 -> .
 NumericValue:0
 AssignmentOperator:= =. -> .,.
210 FOR X=N-1 TO 1 STEP -1
 control: Variable:X -> .
 start:   ["Variable:N -> .", "NumericValue:1", "BinaryOperatorMinus:-(.,.) -> ."]
 end:     ["NumericValue:1"]
 step:    ["NumericValue:1", "UnaryOperatorMinus:-(.) -> =."]
218 REM LOOK AT POSITIVE ZEROS
 Remark:LOOK AT POSITIVE ZEROS
220 IF P[1,X]*P[1,X+1]>0 THEN 240
 NumericValue:1
 Variable:X -> .
 Variable:P(.,.) -> .
 NumericValue:1
 Variable:X -> .
 NumericValue:1
 BinaryOperatorPlus:+(.,.) -> .
 Variable:P(.,.) -> .
 BinaryOperatorMultiply:*(.,.) -> .
 NumericValue:0
 BinaryOperatorGreater:>(.,.) -> ?
 LineNumber:240
230 LET V1=V1+1
 Variable:V1 -> .
 Variable:V1 -> .
 NumericValue:1
 BinaryOperatorPlus:+(.,.) -> .
 AssignmentOperator:= . -> .
238 REM LOOK AT NEGATIVE ZEROS
 Remark:LOOK AT NEGATIVE ZEROS
240 IF P[2,X]*P[2,X+1]>0 THEN 260
 NumericValue:2
 Variable:X -> .
 Variable:P(.,.) -> .
 NumericValue:2
 Variable:X -> .
 NumericValue:1
 BinaryOperatorPlus:+(.,.) -> .
 Variable:P(.,.) -> .
 BinaryOperatorMultiply:*(.,.) -> .
 NumericValue:0
 BinaryOperatorGreater:>(.,.) -> ?
 LineNumber:260
250 LET V2=V2+1
 Variable:V2 -> .
 Variable:V2 -> .
 NumericValue:1
 BinaryOperatorPlus:+(.,.) -> .
 AssignmentOperator:= . -> .
260 NEXT X
 Variable:X -> .
300 PRINT V1;"MAX POSITIVE"
 Variable:V1 -> .
 CarriageControl:;
 TextValue:"MAX POSITIVE"
 CarriageControl:NL
310 PRINT V2;"MAX NEGATIVE"
 Variable:V2 -> .
 CarriageControl:;
 TextValue:"MAX NEGATIVE"
 CarriageControl:NL
320 PRINT
 CarriageControl:NL
340 GOTO 10
 LineNumber:10
500 DATA 4,6,103,201,90
 NumericValue:4
 NumericValue:6
 NumericValue:103
 NumericValue:201
 NumericValue:90
510 DATA 5,1,3,4,-8,2
 NumericValue:5
 NumericValue:1
 NumericValue:3
 NumericValue:4
 NumericValue:8
 UnaryOperatorMinus:-(.) -> =.
 NumericValue:2
520 DATA 6,-4,-3,5,-2,1,-3
 NumericValue:6
 NumericValue:4
 UnaryOperatorMinus:-(.) -> =.
 NumericValue:3
 UnaryOperatorMinus:-(.) -> =.
 NumericValue:5
 NumericValue:2
 UnaryOperatorMinus:-(.) -> =.
 NumericValue:1
 NumericValue:3
 UnaryOperatorMinus:-(.) -> =.
600 DATA 0
 NumericValue:0
999 END
 

